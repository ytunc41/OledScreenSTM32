
OLED_I2C_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ef8  08007ef8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ef8  08007ef8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ebc  2000017c  0800807c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002038  0800807c  00022038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173d0  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033aa  00000000  00000000  00037575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  0003a920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000172ae  00000000  00000000  0003c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa9a  00000000  00000000  00053716  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006fcd8  00000000  00000000  000631b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2e88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  000d2f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e6c 	.word	0x08007e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007e6c 	.word	0x08007e6c

0800014c <baglanti_ok_paket_olustur>:
 */

#include "oled_main.h"

void baglanti_ok_paket_olustur(HabPro* habpro)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]

	habpro->PaketYapisi.veri_boyutu = index;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	7bfa      	ldrb	r2, [r7, #15]
 800015c:	711a      	strb	r2, [r3, #4]
	habpro->PaketYapisi.paket_turu = BAGLANTI_OK;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	2201      	movs	r2, #1
 8000162:	709a      	strb	r2, [r3, #2]
}
 8000164:	bf00      	nop
 8000166:	3714      	adds	r7, #20
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr

0800016e <program_ok_paket_olustur>:

void program_ok_paket_olustur(HabPro* habpro)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b084      	sub	sp, #16
 8000172:	af00      	add	r7, sp, #0
 8000174:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	73fb      	strb	r3, [r7, #15]

	UINT32_ayir(habpro->PaketYapisi.veriler, &index, habpro->CRC32);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1d58      	adds	r0, r3, #5
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8000184:	f107 030f 	add.w	r3, r7, #15
 8000188:	4619      	mov	r1, r3
 800018a:	f000 fb33 	bl	80007f4 <UINT32_ayir>

	habpro->PaketYapisi.veri_boyutu = index;
 800018e:	7bfa      	ldrb	r2, [r7, #15]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	711a      	strb	r2, [r3, #4]
	habpro->PaketYapisi.paket_turu = PROGRAM_OK;
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2203      	movs	r2, #3
 8000198:	709a      	strb	r2, [r3, #2]
}
 800019a:	bf00      	nop
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}

080001a2 <USB_PaketGonder>:

void USB_PaketGonder(HabPro* habpro_t)
{
 80001a2:	b580      	push	{r7, lr}
 80001a4:	b084      	sub	sp, #16
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	73fb      	strb	r3, [r7, #15]
	habpro_t->tx_buffer[index++] = SOF1_BYTE;
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	73fa      	strb	r2, [r7, #15]
 80001b4:	461a      	mov	r2, r3
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4413      	add	r3, r2
 80001ba:	223a      	movs	r2, #58	; 0x3a
 80001bc:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	habpro_t->tx_buffer[index++] = SOF2_BYTE;
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	1c5a      	adds	r2, r3, #1
 80001c4:	73fa      	strb	r2, [r7, #15]
 80001c6:	461a      	mov	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4413      	add	r3, r2
 80001cc:	2222      	movs	r2, #34	; 0x22
 80001ce:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	habpro_t->tx_buffer[index++] = habpro_t->PaketYapisi.paket_turu;
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	1c5a      	adds	r2, r3, #1
 80001d6:	73fa      	strb	r2, [r7, #15]
 80001d8:	4619      	mov	r1, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	789a      	ldrb	r2, [r3, #2]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	440b      	add	r3, r1
 80001e2:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	habpro_t->tx_buffer[index++] = ++habpro_t->PaketYapisi.paket_sayaci;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	78db      	ldrb	r3, [r3, #3]
 80001ea:	3301      	adds	r3, #1
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	70da      	strb	r2, [r3, #3]
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	1c5a      	adds	r2, r3, #1
 80001f6:	73fa      	strb	r2, [r7, #15]
 80001f8:	4619      	mov	r1, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	78da      	ldrb	r2, [r3, #3]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	440b      	add	r3, r1
 8000202:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	habpro_t->tx_buffer[index++] = habpro_t->PaketYapisi.veri_boyutu;
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	1c5a      	adds	r2, r3, #1
 800020a:	73fa      	strb	r2, [r7, #15]
 800020c:	4619      	mov	r1, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	791a      	ldrb	r2, [r3, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	440b      	add	r3, r1
 8000216:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	for(uint8_t i=0; i < habpro_t->PaketYapisi.veri_boyutu; i++)
 800021a:	2300      	movs	r3, #0
 800021c:	73bb      	strb	r3, [r7, #14]
 800021e:	e00e      	b.n	800023e <USB_PaketGonder+0x9c>
		habpro_t->tx_buffer[index++] = habpro_t->PaketYapisi.veriler[i];
 8000220:	7bba      	ldrb	r2, [r7, #14]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	1c59      	adds	r1, r3, #1
 8000226:	73f9      	strb	r1, [r7, #15]
 8000228:	4619      	mov	r1, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4413      	add	r3, r2
 800022e:	795a      	ldrb	r2, [r3, #5]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	440b      	add	r3, r1
 8000234:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	for(uint8_t i=0; i < habpro_t->PaketYapisi.veri_boyutu; i++)
 8000238:	7bbb      	ldrb	r3, [r7, #14]
 800023a:	3301      	adds	r3, #1
 800023c:	73bb      	strb	r3, [r7, #14]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	7bba      	ldrb	r2, [r7, #14]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3eb      	bcc.n	8000220 <USB_PaketGonder+0x7e>
	habpro_t->tx_buffer[index++] = EOF1_BYTE;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	1c5a      	adds	r2, r3, #1
 800024c:	73fa      	strb	r2, [r7, #15]
 800024e:	461a      	mov	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	2229      	movs	r2, #41	; 0x29
 8000256:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
	habpro_t->tx_buffer[index++] = EOF2_BYTE;
 800025a:	7bfb      	ldrb	r3, [r7, #15]
 800025c:	1c5a      	adds	r2, r3, #1
 800025e:	73fa      	strb	r2, [r7, #15]
 8000260:	461a      	mov	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2245      	movs	r2, #69	; 0x45
 8000268:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298

	while(CDC_Transmit_FS(habpro_t->tx_buffer, index) != USBD_OK);
 800026c:	bf00      	nop
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000274:	7bfa      	ldrb	r2, [r7, #15]
 8000276:	b292      	uxth	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4618      	mov	r0, r3
 800027c:	f007 f9ec 	bl	8007658 <CDC_Transmit_FS>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f3      	bne.n	800026e <USB_PaketGonder+0xcc>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <USB_PaketCoz>:


void USB_PaketCoz(HabPro* habpro_t, uint8_t* buffer, uint32_t len)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
	static uint8_t VERILER_SAYAC = 0;

	for(uint8_t i = 0; i < len; i++)
 800029c:	2300      	movs	r3, #0
 800029e:	75fb      	strb	r3, [r7, #23]
 80002a0:	e15d      	b.n	800055e <USB_PaketCoz+0x2ce>
	{
		switch (habpro_t->PaketDurum)
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80002a8:	2b07      	cmp	r3, #7
 80002aa:	f200 80e4 	bhi.w	8000476 <USB_PaketCoz+0x1e6>
 80002ae:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <USB_PaketCoz+0x24>)
 80002b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b4:	080002d5 	.word	0x080002d5
 80002b8:	0800030b 	.word	0x0800030b
 80002bc:	08000349 	.word	0x08000349
 80002c0:	0800036d 	.word	0x0800036d
 80002c4:	08000383 	.word	0x08000383
 80002c8:	080003ab 	.word	0x080003ab
 80002cc:	080003e3 	.word	0x080003e3
 80002d0:	08000429 	.word	0x08000429
		{
			case SOF1:
			{
				if(buffer[i] == SOF1_BYTE)
 80002d4:	7dfb      	ldrb	r3, [r7, #23]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	4413      	add	r3, r2
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b3a      	cmp	r3, #58	; 0x3a
 80002de:	d10a      	bne.n	80002f6 <USB_PaketCoz+0x66>
				{
					habpro_t->PaketYapisi.sof1 = buffer[i];
 80002e0:	7dfb      	ldrb	r3, [r7, #23]
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	4413      	add	r3, r2
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	701a      	strb	r2, [r3, #0]
					habpro_t->PaketDurum = SOF2;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2201      	movs	r2, #1
 80002f0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				}
				else
				{
					habpro_t->Hata.SOF1_HATA_SAYAC++;
				}
				break;
 80002f4:	e0c5      	b.n	8000482 <USB_PaketCoz+0x1f2>
					habpro_t->Hata.SOF1_HATA_SAYAC++;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	3301      	adds	r3, #1
 8000300:	b29a      	uxth	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				break;
 8000308:	e0bb      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case SOF2:
			{
				if(buffer[i] == SOF2_BYTE)
 800030a:	7dfb      	ldrb	r3, [r7, #23]
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	4413      	add	r3, r2
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b22      	cmp	r3, #34	; 0x22
 8000314:	d10a      	bne.n	800032c <USB_PaketCoz+0x9c>
				{
					habpro_t->PaketYapisi.sof2 = buffer[i];
 8000316:	7dfb      	ldrb	r3, [r7, #23]
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	4413      	add	r3, r2
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	705a      	strb	r2, [r3, #1]
					habpro_t->PaketDurum = PAKET_TURU;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2202      	movs	r2, #2
 8000326:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				else
				{
					habpro_t->PaketDurum = SOF1;
					habpro_t->Hata.SOF2_HATA_SAYAC++;
				}
				break;
 800032a:	e0aa      	b.n	8000482 <USB_PaketCoz+0x1f2>
					habpro_t->PaketDurum = SOF1;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2200      	movs	r2, #0
 8000330:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
					habpro_t->Hata.SOF2_HATA_SAYAC++;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800033a:	b29b      	uxth	r3, r3
 800033c:	3301      	adds	r3, #1
 800033e:	b29a      	uxth	r2, r3
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				break;
 8000346:	e09c      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case PAKET_TURU:
			{
				habpro_t->PaketYapisi.paket_turu = buffer[i];
 8000348:	7dfb      	ldrb	r3, [r7, #23]
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	4413      	add	r3, r2
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	709a      	strb	r2, [r3, #2]
				habpro_t->PaketTuru = buffer[i];
 8000354:	7dfb      	ldrb	r3, [r7, #23]
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	4413      	add	r3, r2
 800035a:	781a      	ldrb	r2, [r3, #0]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				habpro_t->PaketDurum = PAKET_SAYACI;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2203      	movs	r2, #3
 8000366:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 800036a:	e08a      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case PAKET_SAYACI:
			{
				habpro_t->PaketYapisi.paket_sayaci = buffer[i];
 800036c:	7dfb      	ldrb	r3, [r7, #23]
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	70da      	strb	r2, [r3, #3]
				habpro_t->PaketDurum = PAKET_BOYUTU;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2204      	movs	r2, #4
 800037c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 8000380:	e07f      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case PAKET_BOYUTU:
			{
				habpro_t->PaketYapisi.veri_boyutu = buffer[i];
 8000382:	7dfb      	ldrb	r3, [r7, #23]
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	4413      	add	r3, r2
 8000388:	781a      	ldrb	r2, [r3, #0]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	711a      	strb	r2, [r3, #4]

				if(habpro_t->PaketYapisi.veri_boyutu == 0)
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	791b      	ldrb	r3, [r3, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d104      	bne.n	80003a0 <USB_PaketCoz+0x110>
				{
					habpro_t->PaketDurum = EOF1;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2206      	movs	r2, #6
 800039a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
					break;
 800039e:	e070      	b.n	8000482 <USB_PaketCoz+0x1f2>
				}
				habpro_t->PaketDurum = VERILER;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2205      	movs	r2, #5
 80003a4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 80003a8:	e06b      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case VERILER:
			{
				habpro_t->PaketYapisi.veriler[VERILER_SAYAC++] = buffer[i];
 80003aa:	7dfb      	ldrb	r3, [r7, #23]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	441a      	add	r2, r3
 80003b0:	4b70      	ldr	r3, [pc, #448]	; (8000574 <USB_PaketCoz+0x2e4>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	1c59      	adds	r1, r3, #1
 80003b6:	b2c8      	uxtb	r0, r1
 80003b8:	496e      	ldr	r1, [pc, #440]	; (8000574 <USB_PaketCoz+0x2e4>)
 80003ba:	7008      	strb	r0, [r1, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	7812      	ldrb	r2, [r2, #0]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	440b      	add	r3, r1
 80003c4:	715a      	strb	r2, [r3, #5]

				if(VERILER_SAYAC == habpro_t->PaketYapisi.veri_boyutu)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	791a      	ldrb	r2, [r3, #4]
 80003ca:	4b6a      	ldr	r3, [pc, #424]	; (8000574 <USB_PaketCoz+0x2e4>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d156      	bne.n	8000480 <USB_PaketCoz+0x1f0>
				{
					habpro_t->PaketDurum = EOF1;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	2206      	movs	r2, #6
 80003d6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
					VERILER_SAYAC = 0;
 80003da:	4b66      	ldr	r3, [pc, #408]	; (8000574 <USB_PaketCoz+0x2e4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003e0:	e04e      	b.n	8000480 <USB_PaketCoz+0x1f0>
			}

			case EOF1:
			{
				if(buffer[i] == EOF1_BYTE)
 80003e2:	7dfb      	ldrb	r3, [r7, #23]
 80003e4:	68ba      	ldr	r2, [r7, #8]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b29      	cmp	r3, #41	; 0x29
 80003ec:	d10b      	bne.n	8000406 <USB_PaketCoz+0x176>
				{
					habpro_t->PaketYapisi.eof1 = buffer[i];
 80003ee:	7dfb      	ldrb	r3, [r7, #23]
 80003f0:	68ba      	ldr	r2, [r7, #8]
 80003f2:	4413      	add	r3, r2
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					habpro_t->PaketDurum = EOF2;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	2207      	movs	r2, #7
 8000400:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				{
					VERILER_SAYAC = 0;
					habpro_t->Hata.EOF1_HATA_SAYAC++;
					habpro_t->PaketDurum = SOF1;
				}
				break;
 8000404:	e03d      	b.n	8000482 <USB_PaketCoz+0x1f2>
					VERILER_SAYAC = 0;
 8000406:	4b5b      	ldr	r3, [pc, #364]	; (8000574 <USB_PaketCoz+0x2e4>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
					habpro_t->Hata.EOF1_HATA_SAYAC++;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8000412:	b29b      	uxth	r3, r3
 8000414:	3301      	adds	r3, #1
 8000416:	b29a      	uxth	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
					habpro_t->PaketDurum = SOF1;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 8000426:	e02c      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			case EOF2:
			{
				if(buffer[i] == EOF2_BYTE)
 8000428:	7dfb      	ldrb	r3, [r7, #23]
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b45      	cmp	r3, #69	; 0x45
 8000432:	d10f      	bne.n	8000454 <USB_PaketCoz+0x1c4>
				{
					habpro_t->PaketYapisi.eof2 = buffer[i];
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	4413      	add	r3, r2
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
					habpro_t->PaketDurum = SOF1;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2200      	movs	r2, #0
 8000446:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
					habpro_t->Flag.USB_PAKET_HAZIR = 1;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2201      	movs	r2, #1
 800044e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
				{
					VERILER_SAYAC = 0;
					habpro_t->Hata.EOF2_HATA_SAYAC++;
					habpro_t->PaketDurum = SOF1;
				}
				break;
 8000452:	e016      	b.n	8000482 <USB_PaketCoz+0x1f2>
					VERILER_SAYAC = 0;
 8000454:	4b47      	ldr	r3, [pc, #284]	; (8000574 <USB_PaketCoz+0x2e4>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
					habpro_t->Hata.EOF2_HATA_SAYAC++;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000460:	b29b      	uxth	r3, r3
 8000462:	3301      	adds	r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
					habpro_t->PaketDurum = SOF1;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	2200      	movs	r2, #0
 8000470:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 8000474:	e005      	b.n	8000482 <USB_PaketCoz+0x1f2>
			}

			default:
			{
				habpro_t->PaketDurum = SOF1;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2200      	movs	r2, #0
 800047a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				break;
 800047e:	e000      	b.n	8000482 <USB_PaketCoz+0x1f2>
				break;
 8000480:	bf00      	nop
			}

		}

		if(habpro_t->Flag.USB_PAKET_HAZIR)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d064      	beq.n	8000558 <USB_PaketCoz+0x2c8>
		{
			switch(habpro_t->PaketTuru)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000494:	2b05      	cmp	r3, #5
 8000496:	d85b      	bhi.n	8000550 <USB_PaketCoz+0x2c0>
 8000498:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <USB_PaketCoz+0x210>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004b9 	.word	0x080004b9
 80004a4:	080004c3 	.word	0x080004c3
 80004a8:	080004cd 	.word	0x080004cd
 80004ac:	08000531 	.word	0x08000531
 80004b0:	0800053b 	.word	0x0800053b
 80004b4:	08000545 	.word	0x08000545
			{
				case BAGLANTI_REQUEST:
				{

					habpro_t->Flag.BAGLANTI_REQUEST = 1;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2201      	movs	r2, #1
 80004bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					break;
 80004c0:	e046      	b.n	8000550 <USB_PaketCoz+0x2c0>
				}

				case BAGLANTI_OK:
				{

					habpro_t->Flag.BAGLANTI_OK = 1;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
					break;
 80004ca:	e041      	b.n	8000550 <USB_PaketCoz+0x2c0>

				case PROGRAM_REQUEST:
				{
					static uint8_t pageNum = 0;

					for(uint8_t i = 0; i < OLED_WIDTH; i++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	75bb      	strb	r3, [r7, #22]
 80004d0:	e018      	b.n	8000504 <USB_PaketCoz+0x274>
					{
						OLED_Buffer[i + pageNum * OLED_WIDTH] = habpro_t->PaketYapisi.veriler[i];
 80004d2:	7dba      	ldrb	r2, [r7, #22]
 80004d4:	7db9      	ldrb	r1, [r7, #22]
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <USB_PaketCoz+0x2e8>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	01db      	lsls	r3, r3, #7
 80004dc:	440b      	add	r3, r1
 80004de:	68f9      	ldr	r1, [r7, #12]
 80004e0:	440a      	add	r2, r1
 80004e2:	7951      	ldrb	r1, [r2, #5]
 80004e4:	4a25      	ldr	r2, [pc, #148]	; (800057c <USB_PaketCoz+0x2ec>)
 80004e6:	54d1      	strb	r1, [r2, r3]
						habpro_t->CRC32 += habpro_t->PaketYapisi.veriler[i];
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80004ee:	7dba      	ldrb	r2, [r7, #22]
 80004f0:	68f9      	ldr	r1, [r7, #12]
 80004f2:	440a      	add	r2, r1
 80004f4:	7952      	ldrb	r2, [r2, #5]
 80004f6:	441a      	add	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
					for(uint8_t i = 0; i < OLED_WIDTH; i++)
 80004fe:	7dbb      	ldrb	r3, [r7, #22]
 8000500:	3301      	adds	r3, #1
 8000502:	75bb      	strb	r3, [r7, #22]
 8000504:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000508:	2b00      	cmp	r3, #0
 800050a:	dae2      	bge.n	80004d2 <USB_PaketCoz+0x242>
					}

					pageNum++;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <USB_PaketCoz+0x2e8>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <USB_PaketCoz+0x2e8>)
 8000516:	701a      	strb	r2, [r3, #0]
					if(pageNum == OLED_PAGESIZE)
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <USB_PaketCoz+0x2e8>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b08      	cmp	r3, #8
 800051e:	d116      	bne.n	800054e <USB_PaketCoz+0x2be>
					{
						pageNum = 0;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <USB_PaketCoz+0x2e8>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
						habpro_t->Flag.PROGRAM_REQUEST = 1;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2201      	movs	r2, #1
 800052a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					}

					break;
 800052e:	e00e      	b.n	800054e <USB_PaketCoz+0x2be>
				}

				case PROGRAM_OK:
				{

					habpro_t->Flag.PROGRAM_OK = 1;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2201      	movs	r2, #1
 8000534:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
					break;
 8000538:	e00a      	b.n	8000550 <USB_PaketCoz+0x2c0>
				}

				case READ_REQUEST:
				{

					habpro_t->Flag.READ_REQUEST = 1;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2201      	movs	r2, #1
 800053e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					break;
 8000542:	e005      	b.n	8000550 <USB_PaketCoz+0x2c0>
				}

				case READ_OK:
				{

					habpro_t->Flag.READ_OK = 1;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2201      	movs	r2, #1
 8000548:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
					break;
 800054c:	e000      	b.n	8000550 <USB_PaketCoz+0x2c0>
					break;
 800054e:	bf00      	nop
				}

			}
			habpro_t->Flag.USB_PAKET_HAZIR = 0;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	for(uint8_t i = 0; i < len; i++)
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	3301      	adds	r3, #1
 800055c:	75fb      	strb	r3, [r7, #23]
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	f63f ae9d 	bhi.w	80002a2 <USB_PaketCoz+0x12>
		}
	}

}
 8000568:	bf00      	nop
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000198 	.word	0x20000198
 8000578:	20000199 	.word	0x20000199
 800057c:	200007c0 	.word	0x200007c0

08000580 <oled_init>:

#include "OLED.h"
extern I2C_HandleTypeDef hi2c2;

void oled_init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f000 fc47 	bl	8000e18 <HAL_Delay>
#elif defined(OLED_128x128)

#endif

	// Set Display Off
	oled_write(OLED_COMMAND, 0xAE, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	21ae      	movs	r1, #174	; 0xae
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f8a0 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0x20, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f89b 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x00, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f896 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xB0, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	21b0      	movs	r1, #176	; 0xb0
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f891 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xC8, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	21c8      	movs	r1, #200	; 0xc8
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f88c 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0x00, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f887 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x10, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2110      	movs	r1, #16
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f882 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0x40, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f87d 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0x81, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	2181      	movs	r1, #129	; 0x81
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f878 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0xFF, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	21ff      	movs	r1, #255	; 0xff
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 f873 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xA1, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	21a1      	movs	r1, #161	; 0xa1
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f86e 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xA6, 1);	// set normal color
 80005f8:	2201      	movs	r2, #1
 80005fa:	21a6      	movs	r1, #166	; 0xa6
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f869 	bl	80006d4 <oled_write>

#if defined(OLED_128x32)
	oled_write(OLED_COMMAND, 0xA8, 1);
#elif defined(OLED_128x64)
	oled_write(OLED_COMMAND, 0xA8, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	21a8      	movs	r1, #168	; 0xa8
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f864 	bl	80006d4 <oled_write>
#endif

#if defined(OLED_128x32)
	oled_write(OLED_COMMAND, 0x1F, 1);
#else
	oled_write(OLED_COMMAND, 0x3F, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	213f      	movs	r1, #63	; 0x3f
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f85f 	bl	80006d4 <oled_write>

//	oled_write(OLED_COMMAND, 0xA8, 1);

//	oled_write(OLED_COMMAND, 0x1F, 1);

	oled_write(OLED_COMMAND, 0xA4, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	21a4      	movs	r1, #164	; 0xa4
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f85a 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xD3, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	21d3      	movs	r1, #211	; 0xd3
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f855 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x00, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	2100      	movs	r1, #0
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f850 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xD5, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	21d5      	movs	r1, #213	; 0xd5
 8000638:	2000      	movs	r0, #0
 800063a:	f000 f84b 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0xF0, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	21f0      	movs	r1, #240	; 0xf0
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f846 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xD9, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	21d9      	movs	r1, #217	; 0xd9
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f841 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x22, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2122      	movs	r1, #34	; 0x22
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f83c 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xDA, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	21da      	movs	r1, #218	; 0xda
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f837 	bl	80006d4 <oled_write>
#if defined(OLED_128x32)
	oled_write(OLED_COMMAND, 0x02, 1);
#else
	oled_write(OLED_COMMAND, 0x12, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	2112      	movs	r1, #18
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f832 	bl	80006d4 <oled_write>
#endif
//	oled_write(OLED_COMMAND, 0x02, 1);

	oled_write(OLED_COMMAND, 0xDB, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	21db      	movs	r1, #219	; 0xdb
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f82d 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x20, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f828 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0x8D, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	218d      	movs	r1, #141	; 0x8d
 8000688:	2000      	movs	r0, #0
 800068a:	f000 f823 	bl	80006d4 <oled_write>
	oled_write(OLED_COMMAND, 0x14, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2114      	movs	r1, #20
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f81e 	bl	80006d4 <oled_write>

	oled_write(OLED_COMMAND, 0xAF, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	21af      	movs	r1, #175	; 0xaf
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f819 	bl	80006d4 <oled_write>

	oled_Fill(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f854 	bl	8000750 <oled_Fill>
	oled_UpdateScreen();
 80006a8:	f000 f876 	bl	8000798 <oled_UpdateScreen>
	HAL_Delay(1000);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f000 fbb2 	bl	8000e18 <HAL_Delay>

	oled_Fill(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f84b 	bl	8000750 <oled_Fill>
	oled_UpdateScreen();
 80006ba:	f000 f86d 	bl	8000798 <oled_UpdateScreen>
	HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f000 fba9 	bl	8000e18 <HAL_Delay>

	oled_Fill(0);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f842 	bl	8000750 <oled_Fill>
	oled_UpdateScreen();
 80006cc:	f000 f864 	bl	8000798 <oled_UpdateScreen>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <oled_write>:

void oled_write(uint8_t addr, uint8_t txdata, uint8_t data_size)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	460b      	mov	r3, r1
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2, OLED_ADDR, addr, I2C_MEMADD_SIZE_8BIT, &txdata, data_size, HAL_MAX_DELAY);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	b299      	uxth	r1, r3
 80006ea:	797b      	ldrb	r3, [r7, #5]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295
 80006f2:	9202      	str	r2, [sp, #8]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	460a      	mov	r2, r1
 80006fe:	2178      	movs	r1, #120	; 0x78
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <oled_write+0x3c>)
 8000702:	f000 ff7b 	bl	80015fc <HAL_I2C_Mem_Write>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000bc0 	.word	0x20000bc0

08000714 <oled_writeData>:

void oled_writeData(uint8_t addr, uint8_t* txdata, uint8_t data_size)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af04      	add	r7, sp, #16
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, OLED_ADDR, addr, I2C_MEMADD_SIZE_8BIT, txdata, data_size, HAL_MAX_DELAY);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	b299      	uxth	r1, r3
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	b29b      	uxth	r3, r3
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	9202      	str	r2, [sp, #8]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	460a      	mov	r2, r1
 800073c:	2178      	movs	r1, #120	; 0x78
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <oled_writeData+0x38>)
 8000740:	f000 ff5c 	bl	80015fc <HAL_I2C_Mem_Write>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000bc0 	.word	0x20000bc0

08000750 <oled_Fill>:

void oled_Fill(uint8_t black_or_white)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    uint8_t x;
    if(black_or_white)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <oled_Fill+0x16>
    	x = 0xFF;
 8000760:	23ff      	movs	r3, #255	; 0xff
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e001      	b.n	800076a <oled_Fill+0x1a>
    else
    	x = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
    uint32_t i;
    for(i = 0; i < sizeof(OLED_Buffer); i++)
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	e007      	b.n	8000780 <oled_Fill+0x30>
    	OLED_Buffer[i] = x;
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <oled_Fill+0x44>)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	7bfa      	ldrb	r2, [r7, #15]
 8000778:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(OLED_Buffer); i++)
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000786:	d3f3      	bcc.n	8000770 <oled_Fill+0x20>
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200007c0 	.word	0x200007c0

08000798 <oled_UpdateScreen>:

void oled_UpdateScreen(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < OLED_HEIGHT/8; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e01d      	b.n	80007e0 <oled_UpdateScreen+0x48>
	{
		oled_write(OLED_COMMAND, 0xB0 + i, 1); // Set the current RAM page address.
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	3b50      	subs	r3, #80	; 0x50
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff90 	bl	80006d4 <oled_write>
		oled_write(OLED_COMMAND, 0x00, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2100      	movs	r1, #0
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff8b 	bl	80006d4 <oled_write>
		oled_write(OLED_COMMAND, 0x10, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ff86 	bl	80006d4 <oled_write>
		oled_writeData(OLED_DATA, &OLED_Buffer[OLED_WIDTH*i], OLED_WIDTH);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	01db      	lsls	r3, r3, #7
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <oled_UpdateScreen+0x58>)
 80007ce:	4413      	add	r3, r2
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	4619      	mov	r1, r3
 80007d4:	2040      	movs	r0, #64	; 0x40
 80007d6:	f7ff ff9d 	bl	8000714 <oled_writeData>
    for(uint8_t i = 0; i < OLED_HEIGHT/8; i++)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	3301      	adds	r3, #1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	d9de      	bls.n	80007a4 <oled_UpdateScreen+0xc>
	}
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200007c0 	.word	0x200007c0

080007f4 <UINT32_ayir>:

	*paket_sayaci += sizeof(float);
}

void UINT32_ayir(uint8_t *veriler, uint8_t *paket_sayaci, const uint32_t veri_u32)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	veriler[(*paket_sayaci) + 0] = ((uint8_t*)&veri_u32)[0];
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	440b      	add	r3, r1
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	701a      	strb	r2, [r3, #0]
	veriler[(*paket_sayaci) + 1] = ((uint8_t*)&veri_u32)[1];
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4413      	add	r3, r2
 800081a:	797a      	ldrb	r2, [r7, #5]
 800081c:	701a      	strb	r2, [r3, #0]
	veriler[(*paket_sayaci) + 2] = ((uint8_t*)&veri_u32)[2];
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	701a      	strb	r2, [r3, #0]
	veriler[(*paket_sayaci) + 3] = ((uint8_t*)&veri_u32)[3];
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3303      	adds	r3, #3
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	79fa      	ldrb	r2, [r7, #7]
 8000838:	701a      	strb	r2, [r3, #0]

	*paket_sayaci += sizeof(uint32_t);
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	b2da      	uxtb	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fa7e 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f82c 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 f8b2 	bl	80009c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000860:	f000 f882 	bl	8000968 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000864:	f006 fe34 	bl	80074d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    // USB konfigure olmus ise led yansin.
	    if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <main+0x5c>)
 800086a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800086e:	2b03      	cmp	r3, #3
 8000870:	d10e      	bne.n	8000890 <main+0x40>
	    {
	    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <main+0x60>)
 800087a:	f000 fd57 	bl	800132c <HAL_GPIO_WritePin>
 800087e:	e012      	b.n	80008a6 <main+0x56>
	    else
	    {
	    	// USB portunun cihazi konfigure etmesi beklenir.
			while(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
			{
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0x60>)
 8000886:	f000 fd69 	bl	800135c <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 fac4 	bl	8000e18 <HAL_Delay>
			while(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <main+0x5c>)
 8000892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000896:	2b03      	cmp	r3, #3
 8000898:	d1f2      	bne.n	8000880 <main+0x30>
			}
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <main+0x60>)
 80008a2:	f000 fd43 	bl	800132c <HAL_GPIO_WritePin>
	    }


	    oled_main();
 80008a6:	f000 f8eb 	bl	8000a80 <oled_main>
	    if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80008aa:	e7dd      	b.n	8000868 <main+0x18>
 80008ac:	200010b8 	.word	0x200010b8
 80008b0:	40011000 	.word	0x40011000

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2228      	movs	r2, #40	; 0x28
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 faca 	bl	8007e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000900:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fd10 	bl	8003330 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000916:	f000 f8ad 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f002 ff7a 	bl	8003830 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000942:	f000 f897 	bl	8000a74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000946:	2310      	movs	r3, #16
 8000948:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f003 f8f5 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800095c:	f000 f88a 	bl	8000a74 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3750      	adds	r7, #80	; 0x50
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C2_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C2_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C2_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_I2C2_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C2_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_I2C2_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_I2C2_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_I2C2_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_I2C2_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_I2C2_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_I2C2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_I2C2_Init+0x50>)
 80009a6:	f000 fcf1 	bl	800138c <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 f860 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000bc0 	.word	0x20000bc0
 80009bc:	40005800 	.word	0x40005800
 80009c0:	000186a0 	.word	0x000186a0

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0xac>)
 8000a40:	f000 fc74 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xac>)
 8000a5e:	f000 fb0b 	bl	8001078 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40011000 	.word	0x40011000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <oled_main>:

extern USBD_HandleTypeDef hUsbDeviceFS;
HabPro habpro_t;

void oled_main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	oled_init();
 8000a84:	f7ff fd7c 	bl	8000580 <oled_init>

	while(1)
	{

		if(habpro_t.Flag.BAGLANTI_REQUEST)
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <oled_main+0xb0>)
 8000a8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d009      	beq.n	8000aa8 <oled_main+0x28>
		{
			baglanti_ok_paket_olustur(&habpro_t);
 8000a94:	4826      	ldr	r0, [pc, #152]	; (8000b30 <oled_main+0xb0>)
 8000a96:	f7ff fb59 	bl	800014c <baglanti_ok_paket_olustur>
			USB_PaketGonder(&habpro_t);
 8000a9a:	4825      	ldr	r0, [pc, #148]	; (8000b30 <oled_main+0xb0>)
 8000a9c:	f7ff fb81 	bl	80001a2 <USB_PaketGonder>

			habpro_t.Flag.BAGLANTI_REQUEST = 0;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <oled_main+0xb0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		}

		if(habpro_t.Flag.BAGLANTI_OK)
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <oled_main+0xb0>)
 8000aaa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <oled_main+0x3c>
		{
			habpro_t.Flag.BAGLANTI_OK = 0;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <oled_main+0xb0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		}

		if(habpro_t.Flag.PROGRAM_REQUEST)
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <oled_main+0xb0>)
 8000abe:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d013      	beq.n	8000af0 <oled_main+0x70>
		{
			program_ok_paket_olustur(&habpro_t);
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <oled_main+0xb0>)
 8000aca:	f7ff fb50 	bl	800016e <program_ok_paket_olustur>
			USB_PaketGonder(&habpro_t);
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <oled_main+0xb0>)
 8000ad0:	f7ff fb67 	bl	80001a2 <USB_PaketGonder>
			habpro_t.CRC32 = 0;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <oled_main+0xb0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

			oled_UpdateScreen();
 8000adc:	f7ff fe5c 	bl	8000798 <oled_UpdateScreen>
			HAL_Delay(1000);
 8000ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae4:	f000 f998 	bl	8000e18 <HAL_Delay>

			habpro_t.Flag.PROGRAM_REQUEST = 0;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <oled_main+0xb0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		}

		if(habpro_t.Flag.PROGRAM_OK)
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <oled_main+0xb0>)
 8000af2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <oled_main+0x84>
		{

			habpro_t.Flag.PROGRAM_OK = 0;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <oled_main+0xb0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
		}

		if(habpro_t.Flag.READ_REQUEST)
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <oled_main+0xb0>)
 8000b06:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <oled_main+0x98>
		{

			habpro_t.Flag.READ_REQUEST = 0;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <oled_main+0xb0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		}

		if(habpro_t.Flag.READ_OK)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <oled_main+0xb0>)
 8000b1a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0b1      	beq.n	8000a88 <oled_main+0x8>
		{

			habpro_t.Flag.READ_OK = 0;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <oled_main+0xb0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		if(habpro_t.Flag.BAGLANTI_REQUEST)
 8000b2c:	e7ac      	b.n	8000a88 <oled_main+0x8>
 8000b2e:	bf00      	nop
 8000b30:	20000c14 	.word	0x20000c14

08000b34 <USB_ReadCallback>:
	}
}


void USB_ReadCallback(uint8_t* buffer, uint32_t len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	USB_PaketCoz(&habpro_t, buffer, len);
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <USB_ReadCallback+0x1c>)
 8000b44:	f7ff fba4 	bl	8000290 <USB_PaketCoz>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000c14 	.word	0x20000c14

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x60>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_MspInit+0x60>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <HAL_I2C_MspInit+0x74>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d124      	bne.n	8000c22 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_I2C_MspInit+0x7c>)
 8000c06:	f000 fa37 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_I2C_MspInit+0x78>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005800 	.word	0x40005800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <BusFault_Handler+0x4>

08000c56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8ac 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c92:	f001 f8fa 	bl	8001e8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20001d4c 	.word	0x20001d4c

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <SystemInit+0x5c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <SystemInit+0x5c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <SystemInit+0x5c>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <SystemInit+0x5c>)
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <SystemInit+0x60>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <SystemInit+0x5c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <SystemInit+0x5c>)
 8000cc2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <SystemInit+0x5c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SystemInit+0x5c>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <SystemInit+0x5c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <SystemInit+0x5c>)
 8000cde:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ce2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SystemInit+0x5c>)
 8000ce6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SystemInit+0x64>)
 8000cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	f8ff0000 	.word	0xf8ff0000
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d0a:	e003      	b.n	8000d14 <LoopCopyDataInit>

08000d0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d12:	3104      	adds	r1, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d1c:	d3f6      	bcc.n	8000d0c <CopyDataInit>
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d20:	e002      	b.n	8000d28 <LoopFillZerobss>

08000d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d24:	f842 3b04 	str.w	r3, [r2], #4

08000d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d2c:	d3f9      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2e:	f7ff ffb7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f007 f86f 	bl	8007e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff fd8b 	bl	8000850 <main>
  bx lr
 8000d3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000d3c:	08007f00 	.word	0x08007f00
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d44:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000d48:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000d4c:	20002038 	.word	0x20002038

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f945 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fef0 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f95d 	bl	800105e <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f925 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x20>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x20>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	200010b4 	.word	0x200010b4

08000e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	200010b4 	.word	0x200010b4

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff0 	bl	8000e04 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_Delay+0x40>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffe0 	bl	8000e04 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <__NVIC_EnableIRQ+0x34>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff90 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff2d 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff42 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff90 	bl	8000f4c <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5f 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff35 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e127      	b.n	80012dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8116 	bne.w	80012d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d034      	beq.n	800111c <HAL_GPIO_Init+0xa4>
 80010b2:	2b12      	cmp	r3, #18
 80010b4:	d80d      	bhi.n	80010d2 <HAL_GPIO_Init+0x5a>
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d02b      	beq.n	8001112 <HAL_GPIO_Init+0x9a>
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d804      	bhi.n	80010c8 <HAL_GPIO_Init+0x50>
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d031      	beq.n	8001126 <HAL_GPIO_Init+0xae>
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d01c      	beq.n	8001100 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c6:	e048      	b.n	800115a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d043      	beq.n	8001154 <HAL_GPIO_Init+0xdc>
 80010cc:	2b11      	cmp	r3, #17
 80010ce:	d01b      	beq.n	8001108 <HAL_GPIO_Init+0x90>
          break;
 80010d0:	e043      	b.n	800115a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010d2:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <HAL_GPIO_Init+0x280>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d026      	beq.n	8001126 <HAL_GPIO_Init+0xae>
 80010d8:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <HAL_GPIO_Init+0x280>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d806      	bhi.n	80010ec <HAL_GPIO_Init+0x74>
 80010de:	4a87      	ldr	r2, [pc, #540]	; (80012fc <HAL_GPIO_Init+0x284>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d020      	beq.n	8001126 <HAL_GPIO_Init+0xae>
 80010e4:	4a86      	ldr	r2, [pc, #536]	; (8001300 <HAL_GPIO_Init+0x288>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01d      	beq.n	8001126 <HAL_GPIO_Init+0xae>
          break;
 80010ea:	e036      	b.n	800115a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ec:	4a85      	ldr	r2, [pc, #532]	; (8001304 <HAL_GPIO_Init+0x28c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0xae>
 80010f2:	4a85      	ldr	r2, [pc, #532]	; (8001308 <HAL_GPIO_Init+0x290>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d016      	beq.n	8001126 <HAL_GPIO_Init+0xae>
 80010f8:	4a84      	ldr	r2, [pc, #528]	; (800130c <HAL_GPIO_Init+0x294>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0xae>
          break;
 80010fe:	e02c      	b.n	800115a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e028      	b.n	800115a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	3304      	adds	r3, #4
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e023      	b.n	800115a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e01e      	b.n	800115a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	330c      	adds	r3, #12
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e019      	b.n	800115a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112e:	2304      	movs	r3, #4
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e012      	b.n	800115a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	611a      	str	r2, [r3, #16]
          break;
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	615a      	str	r2, [r3, #20]
          break;
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2bff      	cmp	r3, #255	; 0xff
 800115e:	d801      	bhi.n	8001164 <HAL_GPIO_Init+0xec>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	e001      	b.n	8001168 <HAL_GPIO_Init+0xf0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3304      	adds	r3, #4
 8001168:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2bff      	cmp	r3, #255	; 0xff
 800116e:	d802      	bhi.n	8001176 <HAL_GPIO_Init+0xfe>
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x104>
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	3b08      	subs	r3, #8
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	210f      	movs	r1, #15
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	401a      	ands	r2, r3
 800118e:	6a39      	ldr	r1, [r7, #32]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	431a      	orrs	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8096 	beq.w	80012d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_GPIO_Init+0x298>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_GPIO_Init+0x298>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_GPIO_Init+0x298>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c2:	4a54      	ldr	r2, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x29c>)
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x19e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4a      	ldr	r2, [pc, #296]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x19a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x196>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x192>
 8001206:	2303      	movs	r3, #3
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x1a0>
 800120a:	2304      	movs	r3, #4
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x1a0>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x1a0>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x1a0>
 8001216:	2300      	movs	r3, #0
 8001218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800121a:	f002 0203 	and.w	r2, r2, #3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4093      	lsls	r3, r2
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001228:	493a      	ldr	r1, [pc, #232]	; (8001314 <HAL_GPIO_Init+0x29c>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4938      	ldr	r1, [pc, #224]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	4933      	ldr	r1, [pc, #204]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	492e      	ldr	r1, [pc, #184]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	43db      	mvns	r3, r3
 8001280:	4929      	ldr	r1, [pc, #164]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001282:	4013      	ands	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4924      	ldr	r1, [pc, #144]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	491f      	ldr	r1, [pc, #124]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	491a      	ldr	r1, [pc, #104]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60cb      	str	r3, [r1, #12]
 80012c6:	e006      	b.n	80012d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4915      	ldr	r1, [pc, #84]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f47f aed0 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 80012ec:	bf00      	nop
 80012ee:	372c      	adds	r7, #44	; 0x2c
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	10210000 	.word	0x10210000
 80012fc:	10110000 	.word	0x10110000
 8001300:	10120000 	.word	0x10120000
 8001304:	10310000 	.word	0x10310000
 8001308:	10320000 	.word	0x10320000
 800130c:	10220000 	.word	0x10220000
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	40010800 	.word	0x40010800
 800131c:	40010c00 	.word	0x40010c00
 8001320:	40011000 	.word	0x40011000
 8001324:	40011400 	.word	0x40011400
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	611a      	str	r2, [r3, #16]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800137a:	e002      	b.n	8001382 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137c:	887a      	ldrh	r2, [r7, #2]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e11f      	b.n	80015de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fc00 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f0:	f002 fb74 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a7b      	ldr	r2, [pc, #492]	; (80015e8 <HAL_I2C_Init+0x25c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d807      	bhi.n	8001410 <HAL_I2C_Init+0x84>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_I2C_Init+0x260>)
 8001404:	4293      	cmp	r3, r2
 8001406:	bf94      	ite	ls
 8001408:	2301      	movls	r3, #1
 800140a:	2300      	movhi	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e006      	b.n	800141e <HAL_I2C_Init+0x92>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a77      	ldr	r2, [pc, #476]	; (80015f0 <HAL_I2C_Init+0x264>)
 8001414:	4293      	cmp	r3, r2
 8001416:	bf94      	ite	ls
 8001418:	2301      	movls	r3, #1
 800141a:	2300      	movhi	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0db      	b.n	80015de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_I2C_Init+0x268>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9b      	lsrs	r3, r3, #18
 8001430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a64      	ldr	r2, [pc, #400]	; (80015e8 <HAL_I2C_Init+0x25c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d802      	bhi.n	8001460 <HAL_I2C_Init+0xd4>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	e009      	b.n	8001474 <HAL_I2C_Init+0xe8>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4a63      	ldr	r2, [pc, #396]	; (80015f8 <HAL_I2C_Init+0x26c>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	099b      	lsrs	r3, r3, #6
 8001472:	3301      	adds	r3, #1
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	430b      	orrs	r3, r1
 800147a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001486:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4956      	ldr	r1, [pc, #344]	; (80015e8 <HAL_I2C_Init+0x25c>)
 8001490:	428b      	cmp	r3, r1
 8001492:	d80d      	bhi.n	80014b0 <HAL_I2C_Init+0x124>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e59      	subs	r1, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	bf38      	it	cc
 80014ac:	2304      	movcc	r3, #4
 80014ae:	e04f      	b.n	8001550 <HAL_I2C_Init+0x1c4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d111      	bne.n	80014dc <HAL_I2C_Init+0x150>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e58      	subs	r0, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	e012      	b.n	8001502 <HAL_I2C_Init+0x176>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e58      	subs	r0, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	0099      	lsls	r1, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_I2C_Init+0x17e>
 8001506:	2301      	movs	r3, #1
 8001508:	e022      	b.n	8001550 <HAL_I2C_Init+0x1c4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10e      	bne.n	8001530 <HAL_I2C_Init+0x1a4>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1e58      	subs	r0, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	440b      	add	r3, r1
 8001520:	fbb0 f3f3 	udiv	r3, r0, r3
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152e:	e00f      	b.n	8001550 <HAL_I2C_Init+0x1c4>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	6809      	ldr	r1, [r1, #0]
 8001554:	4313      	orrs	r3, r2
 8001556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800157e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6911      	ldr	r1, [r2, #16]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68d2      	ldr	r2, [r2, #12]
 800158a:	4311      	orrs	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	430b      	orrs	r3, r1
 8001592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	000186a0 	.word	0x000186a0
 80015ec:	001e847f 	.word	0x001e847f
 80015f0:	003d08ff 	.word	0x003d08ff
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	4608      	mov	r0, r1
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	817b      	strh	r3, [r7, #10]
 800160e:	460b      	mov	r3, r1
 8001610:	813b      	strh	r3, [r7, #8]
 8001612:	4613      	mov	r3, r2
 8001614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001616:	f7ff fbf5 	bl	8000e04 <HAL_GetTick>
 800161a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b20      	cmp	r3, #32
 8001626:	f040 80d9 	bne.w	80017dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2319      	movs	r3, #25
 8001630:	2201      	movs	r2, #1
 8001632:	496d      	ldr	r1, [pc, #436]	; (80017e8 <HAL_I2C_Mem_Write+0x1ec>)
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f971 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001640:	2302      	movs	r3, #2
 8001642:	e0cc      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Mem_Write+0x56>
 800164e:	2302      	movs	r3, #2
 8001650:	e0c5      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d007      	beq.n	8001678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2221      	movs	r2, #33	; 0x21
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2240      	movs	r2, #64	; 0x40
 8001694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a3a      	ldr	r2, [r7, #32]
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_I2C_Mem_Write+0x1f0>)
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ba:	88f8      	ldrh	r0, [r7, #6]
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	8979      	ldrh	r1, [r7, #10]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4603      	mov	r3, r0
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f890 	bl	80017f0 <I2C_RequestMemoryWrite>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d052      	beq.n	800177c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e081      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f9f2 	bl	8001ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d11b      	bne.n	800177c <HAL_I2C_Mem_Write+0x180>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d017      	beq.n	800177c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1aa      	bne.n	80016da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f9de 	bl	8001b4a <I2C_WaitOnBTFFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00d      	beq.n	80017b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2b04      	cmp	r3, #4
 800179a:	d107      	bne.n	80017ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e016      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	817b      	strh	r3, [r7, #10]
 8001802:	460b      	mov	r3, r1
 8001804:	813b      	strh	r3, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2200      	movs	r2, #0
 8001822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f878 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001840:	d103      	bne.n	800184a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e05f      	b.n	800190e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800185c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	492d      	ldr	r1, [pc, #180]	; (8001918 <I2C_RequestMemoryWrite+0x128>)
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f8b0 	bl	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e04c      	b.n	800190e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f91a 	bl	8001ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d107      	bne.n	80018b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02b      	b.n	800190e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018bc:	893b      	ldrh	r3, [r7, #8]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e021      	b.n	800190c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8f4 	bl	8001ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d107      	bne.n	80018fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e005      	b.n	800190e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001902:	893b      	ldrh	r3, [r7, #8]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	00010002 	.word	0x00010002

0800191c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192c:	e025      	b.n	800197a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d021      	beq.n	800197a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff fa65 	bl	8000e04 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d116      	bne.n	800197a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f043 0220 	orr.w	r2, r3, #32
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e023      	b.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10d      	bne.n	80019a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4013      	ands	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	e00c      	b.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4013      	ands	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d0b6      	beq.n	800192e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d8:	e051      	b.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d123      	bne.n	8001a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0204 	orr.w	r2, r3, #4
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e046      	b.n	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d021      	beq.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3a:	f7ff f9e3 	bl	8000e04 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d302      	bcc.n	8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d116      	bne.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f043 0220 	orr.w	r2, r3, #32
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e020      	b.n	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10c      	bne.n	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4013      	ands	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e00b      	b.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d18d      	bne.n	80019da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ad4:	e02d      	b.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f878 	bl	8001bcc <I2C_IsAcknowledgeFailed>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e02d      	b.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d021      	beq.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7ff f989 	bl	8000e04 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d116      	bne.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f043 0220 	orr.w	r2, r3, #32
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e007      	b.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d1ca      	bne.n	8001ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b56:	e02d      	b.n	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f837 	bl	8001bcc <I2C_IsAcknowledgeFailed>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e02d      	b.n	8001bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6e:	d021      	beq.n	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b70:	f7ff f948 	bl	8000e04 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d302      	bcc.n	8001b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e007      	b.n	8001bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d1ca      	bne.n	8001b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be2:	d11b      	bne.n	8001c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0204 	orr.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af06      	add	r7, sp, #24
 8001c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0fd      	b.n	8001e36 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f005 fe36 	bl	80078c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 f849 	bl	8003cf8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	687e      	ldr	r6, [r7, #4]
 8001c6e:	466d      	mov	r5, sp
 8001c70:	f106 0410 	add.w	r4, r6, #16
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	602b      	str	r3, [r5, #0]
 8001c7c:	1d33      	adds	r3, r6, #4
 8001c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c80:	6838      	ldr	r0, [r7, #0]
 8001c82:	f002 f813 	bl	8003cac <USB_CoreInit>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0ce      	b.n	8001e36 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 f844 	bl	8003d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e04c      	b.n	8001d44 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3301      	adds	r3, #1
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3336      	adds	r3, #54	; 0x36
 8001ce8:	4602      	mov	r2, r0
 8001cea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	3338      	adds	r3, #56	; 0x38
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	333c      	adds	r3, #60	; 0x3c
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3340      	adds	r3, #64	; 0x40
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	3301      	adds	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d3ad      	bcc.n	8001caa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e044      	b.n	8001dde <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3b5      	bcc.n	8001d54 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	687e      	ldr	r6, [r7, #4]
 8001df0:	466d      	mov	r5, sp
 8001df2:	f106 0410 	add.w	r4, r6, #16
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	1d33      	adds	r3, r6, #4
 8001e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	f001 ff9e 	bl	8003d44 <USB_DevInit>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00d      	b.n	8001e36 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 ff38 	bl	8005ca4 <USB_DevDisconnect>

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_PCD_Start+0x16>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e016      	b.n	8001e82 <HAL_PCD_Start+0x44>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 ff33 	bl	8003ccc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e66:	2101      	movs	r1, #1
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f005 ff9c 	bl	8007da6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 ff0c 	bl	8005c90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b088      	sub	sp, #32
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 ff0e 	bl	8005cb8 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea6:	d102      	bne.n	8001eae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fb61 	bl	8002570 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ff00 	bl	8005cb8 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d112      	bne.n	8001eea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f005 fd6a 	bl	80079b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f925 	bl	8002134 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fee2 	bl	8005cb8 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001efe:	d10b      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 fecb 	bl	8005cb8 <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2c:	d10b      	bne.n	8001f46 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f40:	b292      	uxth	r2, r2
 8001f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 feb4 	bl	8005cb8 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5a:	d126      	bne.n	8001faa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	b292      	uxth	r2, r2
 8001f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f005 fd4b 	bl	8007a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fe82 	bl	8005cb8 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fbe:	f040 8084 	bne.w	80020ca <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	77fb      	strb	r3, [r7, #31]
 8001fc6:	e011      	b.n	8001fec <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	441a      	add	r2, r3
 8001fd4:	7ffb      	ldrb	r3, [r7, #31]
 8001fd6:	8812      	ldrh	r2, [r2, #0]
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	f107 0120 	add.w	r1, r7, #32
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001fe6:	7ffb      	ldrb	r3, [r7, #31]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	77fb      	strb	r3, [r7, #31]
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d9ea      	bls.n	8001fc8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	b292      	uxth	r2, r2
 800201e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002022:	bf00      	nop
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202c:	b29b      	uxth	r3, r3
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f6      	beq.n	8002024 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203e:	b29a      	uxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002048:	b292      	uxth	r2, r2
 800204a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	77fb      	strb	r3, [r7, #31]
 8002052:	e010      	b.n	8002076 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4611      	mov	r1, r2
 800205c:	7ffa      	ldrb	r2, [r7, #31]
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	440a      	add	r2, r1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f107 0120 	add.w	r1, r7, #32
 8002068:	440b      	add	r3, r1
 800206a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800206e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002070:	7ffb      	ldrb	r3, [r7, #31]
 8002072:	3301      	adds	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	2b07      	cmp	r3, #7
 800207a:	d9eb      	bls.n	8002054 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	b292      	uxth	r2, r2
 8002090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a6:	b292      	uxth	r2, r2
 80020a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0204 	orr.w	r2, r2, #4
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 fc95 	bl	80079f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fdf2 	bl	8005cb8 <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020de:	d10e      	bne.n	80020fe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f2:	b292      	uxth	r2, r2
 80020f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f005 fc4e 	bl	800799a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fdd8 	bl	8005cb8 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002112:	d10b      	bne.n	800212c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211c:	b29a      	uxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002126:	b292      	uxth	r2, r2
 8002128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800212c:	bf00      	nop
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_SetAddress+0x1a>
 800214a:	2302      	movs	r3, #2
 800214c:	e013      	b.n	8002176 <HAL_PCD_SetAddress+0x42>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fd7f 	bl	8005c6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	4608      	mov	r0, r1
 8002188:	4611      	mov	r1, r2
 800218a:	461a      	mov	r2, r3
 800218c:	4603      	mov	r3, r0
 800218e:	70fb      	strb	r3, [r7, #3]
 8002190:	460b      	mov	r3, r1
 8002192:	803b      	strh	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800219c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da0e      	bge.n	80021c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	705a      	strb	r2, [r3, #1]
 80021c0:	e00e      	b.n	80021e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	f003 0207 	and.w	r2, r3, #7
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021ec:	883a      	ldrh	r2, [r7, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	78ba      	ldrb	r2, [r7, #2]
 80021f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800220a:	78bb      	ldrb	r3, [r7, #2]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d102      	bne.n	8002216 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_PCD_EP_Open+0xa6>
 8002220:	2302      	movs	r3, #2
 8002222:	e00e      	b.n	8002242 <HAL_PCD_EP_Open+0xc4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f001 fda6 	bl	8003d84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002240:	7afb      	ldrb	r3, [r7, #11]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da0e      	bge.n	800227c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	705a      	strb	r2, [r3, #1]
 800227a:	e00e      	b.n	800229a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_EP_Close+0x6a>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e00e      	b.n	80022d2 <HAL_PCD_EP_Close+0x88>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 f8c8 	bl	8004458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	460b      	mov	r3, r1
 80022e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	f003 0207 	and.w	r2, r3, #7
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2200      	movs	r2, #0
 8002318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	b2da      	uxtb	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6979      	ldr	r1, [r7, #20]
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fa7a 	bl	8004830 <USB_EPStartXfer>
 800233c:	e005      	b.n	800234a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fa73 	bl	8004830 <USB_EPStartXfer>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0207 	and.w	r2, r3, #7
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2201      	movs	r2, #1
 80023cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6979      	ldr	r1, [r7, #20]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fa20 	bl	8004830 <USB_EPStartXfer>
 80023f0:	e005      	b.n	80023fe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6979      	ldr	r1, [r7, #20]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fa19 	bl	8004830 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0207 	and.w	r2, r3, #7
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d901      	bls.n	8002426 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e04c      	b.n	80024c0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da0e      	bge.n	800244c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	705a      	strb	r2, [r3, #1]
 800244a:	e00c      	b.n	8002466 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	b2da      	uxtb	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_EP_SetStall+0x7e>
 8002482:	2302      	movs	r3, #2
 8002484:	e01c      	b.n	80024c0 <HAL_PCD_EP_SetStall+0xb8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 faeb 	bl	8005a70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d108      	bne.n	80024b6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f003 fc10 	bl	8005cd6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d901      	bls.n	80024e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e040      	b.n	8002568 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	da0e      	bge.n	800250c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	705a      	strb	r2, [r3, #1]
 800250a:	e00e      	b.n	800252a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	b2da      	uxtb	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PCD_EP_ClrStall+0x82>
 8002546:	2302      	movs	r3, #2
 8002548:	e00e      	b.n	8002568 <HAL_PCD_EP_ClrStall+0xa0>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fad9 	bl	8005b10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002578:	e2df      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002582:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002590:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8158 	bne.w	800284a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800259a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d152      	bne.n	800264a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	81fb      	strh	r3, [r7, #14]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3328      	adds	r3, #40	; 0x28
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	3302      	adds	r3, #2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	441a      	add	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f005 f9ab 	bl	8007966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 828e 	beq.w	8002b3a <PCD_EP_ISR_Handler+0x5ca>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8289 	bne.w	8002b3a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b292      	uxth	r2, r2
 800263c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002648:	e277      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800265a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800265c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002660:	2b00      	cmp	r3, #0
 8002662:	d034      	beq.n	80026ce <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f003 fb66 	bl	8005d74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b4:	4013      	ands	r3, r2
 80026b6:	823b      	strh	r3, [r7, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	8a3a      	ldrh	r2, [r7, #16]
 80026be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c2:	b292      	uxth	r2, r2
 80026c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f005 f920 	bl	800790c <HAL_PCD_SetupStageCallback>
 80026cc:	e235      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f280 8231 	bge.w	8002b3a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e4:	4013      	ands	r3, r2
 80026e6:	83bb      	strh	r3, [r7, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	8bba      	ldrh	r2, [r7, #28]
 80026ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f2:	b292      	uxth	r2, r2
 80026f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	3306      	adds	r3, #6
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d019      	beq.n	800275e <PCD_EP_ISR_Handler+0x1ee>
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	6959      	ldr	r1, [r3, #20]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002742:	b29b      	uxth	r3, r3
 8002744:	f003 fb16 	bl	8005d74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	441a      	add	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002756:	2100      	movs	r1, #0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f005 f8e9 	bl	8007930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <PCD_EP_ISR_Handler+0x23c>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002790:	b29a      	uxth	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	e02f      	b.n	800280c <PCD_EP_ISR_Handler+0x29c>
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b3e      	cmp	r3, #62	; 0x3e
 80027b2:	d813      	bhi.n	80027dc <PCD_EP_ISR_Handler+0x26c>
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <PCD_EP_ISR_Handler+0x25e>
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	3301      	adds	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	e017      	b.n	800280c <PCD_EP_ISR_Handler+0x29c>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <PCD_EP_ISR_Handler+0x286>
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	3b01      	subs	r3, #1
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002806:	b29a      	uxth	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281c:	827b      	strh	r3, [r7, #18]
 800281e:	8a7b      	ldrh	r3, [r7, #18]
 8002820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002824:	827b      	strh	r3, [r7, #18]
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800282c:	827b      	strh	r3, [r7, #18]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	8a7b      	ldrh	r3, [r7, #18]
 8002834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	b29b      	uxth	r3, r3
 8002846:	8013      	strh	r3, [r2, #0]
 8002848:	e177      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800285c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002860:	2b00      	cmp	r3, #0
 8002862:	f280 80ea 	bge.w	8002a3a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29a      	uxth	r2, r3
 8002878:	f640 738f 	movw	r3, #3983	; 0xf8f
 800287c:	4013      	ands	r3, r2
 800287e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002894:	b292      	uxth	r2, r2
 8002896:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002898:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	7b1b      	ldrb	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d122      	bne.n	80028fc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	3306      	adds	r3, #6
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8087 	beq.w	80029f6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6959      	ldr	r1, [r3, #20]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	88da      	ldrh	r2, [r3, #6]
 80028f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f6:	f003 fa3d 	bl	8005d74 <USB_ReadPMA>
 80028fa:	e07c      	b.n	80029f6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d108      	bne.n	8002916 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002906:	461a      	mov	r2, r3
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f923 	bl	8002b56 <HAL_PCD_EP_DB_Receive>
 8002910:	4603      	mov	r3, r0
 8002912:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002914:	e06f      	b.n	80029f6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800292c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002930:	847b      	strh	r3, [r7, #34]	; 0x22
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	441a      	add	r2, r3
 8002940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	3302      	adds	r3, #2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800299a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02a      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	6959      	ldr	r1, [r3, #20]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	891a      	ldrh	r2, [r3, #8]
 80029ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ae:	f003 f9e1 	bl	8005d74 <USB_ReadPMA>
 80029b2:	e020      	b.n	80029f6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	3306      	adds	r3, #6
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	6959      	ldr	r1, [r3, #20]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	895a      	ldrh	r2, [r3, #10]
 80029f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029f2:	f003 f9bf 	bl	8005d74 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029fc:	441a      	add	r2, r3
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a08:	441a      	add	r2, r3
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <PCD_EP_ISR_Handler+0x4b0>
 8002a16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d206      	bcs.n	8002a2e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f004 ff82 	bl	8007930 <HAL_PCD_DataOutStageCallback>
 8002a2c:	e005      	b.n	8002a3a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fefb 	bl	8004830 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d07a      	beq.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	843b      	strh	r3, [r7, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	8c3b      	ldrh	r3, [r7, #32]
 8002a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d108      	bne.n	8002aaa <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d146      	bne.n	8002b2e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002aa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d141      	bne.n	8002b2e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	8bfb      	ldrh	r3, [r7, #30]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d906      	bls.n	8002aec <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	8bfb      	ldrh	r3, [r7, #30]
 8002ae4:	1ad2      	subs	r2, r2, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	e002      	b.n	8002af2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f004 ff30 	bl	8007966 <HAL_PCD_DataInStageCallback>
 8002b06:	e018      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	8bfb      	ldrh	r3, [r7, #30]
 8002b0e:	441a      	add	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	441a      	add	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fe82 	bl	8004830 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b2c:	e005      	b.n	8002b3a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b30:	461a      	mov	r2, r3
 8002b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f91b 	bl	8002d70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f6ff ad17 	blt.w	800257a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3738      	adds	r7, #56	; 0x38
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07e      	beq.n	8002c6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3302      	adds	r3, #2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d306      	bcc.n	8002bb0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e002      	b.n	8002bb6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d123      	bne.n	8002c06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd8:	833b      	strh	r3, [r7, #24]
 8002bda:	8b3b      	ldrh	r3, [r7, #24]
 8002bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be0:	833b      	strh	r3, [r7, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	8b3b      	ldrh	r3, [r7, #24]
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01f      	beq.n	8002c50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	82fb      	strh	r3, [r7, #22]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	8afb      	ldrh	r3, [r7, #22]
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8087 	beq.w	8002d66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	891a      	ldrh	r2, [r3, #8]
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	f003 f885 	bl	8005d74 <USB_ReadPMA>
 8002c6a:	e07c      	b.n	8002d66 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3306      	adds	r3, #6
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	8b7b      	ldrh	r3, [r7, #26]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d306      	bcc.n	8002cae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	8b7b      	ldrh	r3, [r7, #26]
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	e002      	b.n	8002cb4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d123      	bne.n	8002d04 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	83fb      	strh	r3, [r7, #30]
 8002cd8:	8bfb      	ldrh	r3, [r7, #30]
 8002cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cde:	83fb      	strh	r3, [r7, #30]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	8bfb      	ldrh	r3, [r7, #30]
 8002cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11f      	bne.n	8002d4e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d28:	83bb      	strh	r3, [r7, #28]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	441a      	add	r2, r3
 8002d38:	8bbb      	ldrh	r3, [r7, #28]
 8002d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d4e:	8b7b      	ldrh	r3, [r7, #26]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	895a      	ldrh	r2, [r3, #10]
 8002d60:	8b7b      	ldrh	r3, [r7, #26]
 8002d62:	f003 f807 	bl	8005d74 <USB_ReadPMA>
    }
  }

  return count;
 8002d66:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8132 	beq.w	8002fee <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d906      	bls.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc4:	1ad2      	subs	r2, r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	e002      	b.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d12c      	bne.n	8002e34 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f004 fdc0 	bl	8007966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 822f 	beq.w	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	827b      	strh	r3, [r7, #18]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	8a7b      	ldrh	r3, [r7, #18]
 8002e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	8013      	strh	r3, [r2, #0]
 8002e32:	e20d      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01f      	beq.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 81e3 	bne.w	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e90:	441a      	add	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e9c:	441a      	add	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d309      	bcc.n	8002ec2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	621a      	str	r2, [r3, #32]
 8002ec0:	e014      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed6:	e009      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d155      	bne.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x230>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	011a      	lsls	r2, r3, #4
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4413      	add	r3, r2
 8002f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d112      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e047      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f4c:	d811      	bhi.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x202>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	3301      	adds	r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	801a      	strh	r2, [r3, #0]
 8002f70:	e032      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x218>
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	801a      	strh	r2, [r3, #0]
 8002f9e:	e01b      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d117      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6959      	ldr	r1, [r3, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	891a      	ldrh	r2, [r3, #8]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f002 fe80 	bl	8005cec <USB_WritePMA>
 8002fec:	e130      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	3306      	adds	r3, #6
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003016:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800301e:	429a      	cmp	r2, r3
 8003020:	d306      	bcc.n	8003030 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	619a      	str	r2, [r3, #24]
 800302e:	e002      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d12c      	bne.n	8003098 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f004 fc8e 	bl	8007966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 80fd 	bne.w	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]
 8003096:	e0db      	b.n	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 80b1 	bne.w	8003250 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030f4:	441a      	add	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003100:	441a      	add	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d309      	bcc.n	8003126 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	621a      	str	r2, [r3, #32]
 8003124:	e014      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800312e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800313a:	e009      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d155      	bne.n	800320a <HAL_PCD_EP_DB_Transmit+0x49a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003172:	4413      	add	r3, r2
 8003174:	647b      	str	r3, [r7, #68]	; 0x44
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	011a      	lsls	r2, r3, #4
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	4413      	add	r3, r2
 8003180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	2b00      	cmp	r3, #0
 800318a:	d112      	bne.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x442>
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003196:	b29a      	uxth	r2, r3
 8003198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	e044      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	2b3e      	cmp	r3, #62	; 0x3e
 80031b6:	d811      	bhi.n	80031dc <HAL_PCD_EP_DB_Transmit+0x46c>
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_PCD_EP_DB_Transmit+0x45e>
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	3301      	adds	r3, #1
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	e02f      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_PCD_EP_DB_Transmit+0x482>
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	3b01      	subs	r3, #1
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003202:	b29a      	uxth	r2, r3
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e018      	b.n	800323c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d114      	bne.n	800323c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	4413      	add	r3, r2
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	011a      	lsls	r2, r3, #4
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	4413      	add	r3, r2
 800322e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	b29a      	uxth	r2, r3
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6959      	ldr	r1, [r3, #20]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	895a      	ldrh	r2, [r3, #10]
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	b29b      	uxth	r3, r3
 800324c:	f002 fd4e 	bl	8005cec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326a:	823b      	strh	r3, [r7, #16]
 800326c:	8a3b      	ldrh	r3, [r7, #16]
 800326e:	f083 0310 	eor.w	r3, r3, #16
 8003272:	823b      	strh	r3, [r7, #16]
 8003274:	8a3b      	ldrh	r3, [r7, #16]
 8003276:	f083 0320 	eor.w	r3, r3, #32
 800327a:	823b      	strh	r3, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	8a3b      	ldrh	r3, [r7, #16]
 800328c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329c:	b29b      	uxth	r3, r3
 800329e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3748      	adds	r7, #72	; 0x48
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b087      	sub	sp, #28
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
 80032b8:	4613      	mov	r3, r2
 80032ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032bc:	897b      	ldrh	r3, [r7, #10]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	897b      	ldrh	r3, [r7, #10]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e009      	b.n	80032f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032e0:	897a      	ldrh	r2, [r7, #10]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032f4:	893b      	ldrh	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	b29a      	uxth	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	80da      	strh	r2, [r3, #6]
 8003308:	e00b      	b.n	8003322 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2201      	movs	r2, #1
 800330e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	b29a      	uxth	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	b29a      	uxth	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e26c      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	d00c      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800335c:	4b8f      	ldr	r3, [pc, #572]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d112      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e246      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b80      	ldr	r3, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7f      	ldr	r2, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b7b      	ldr	r3, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7a      	ldr	r2, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b72      	ldr	r3, [pc, #456]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a71      	ldr	r2, [pc, #452]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fd fcfa 	bl	8000e04 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd fcf6 	bl	8000e04 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1fa      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5d      	ldr	r3, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd fce6 	bl	8000e04 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fd fce2 	bl	8000e04 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1e6      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346a:	4b4c      	ldr	r3, [pc, #304]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1ba      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4939      	ldr	r1, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fd fc9b 	bl	8000e04 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fd fc97 	bl	8000e04 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e19b      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4927      	ldr	r1, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd fc7a 	bl	8000e04 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fd fc76 	bl	8000e04 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e17a      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03a      	beq.n	80035b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7fd fc5a 	bl	8000e04 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fd fc56 	bl	8000e04 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e15a      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_OscConfig+0x26c>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fac6 	bl	8003b04 <RCC_Delay>
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x274>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fd fc40 	bl	8000e04 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd fc3c 	bl	8000e04 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e140      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	42420000 	.word	0x42420000
 80035a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b9e      	ldr	r3, [pc, #632]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a6 	beq.w	800370e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b97      	ldr	r3, [pc, #604]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b94      	ldr	r3, [pc, #592]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a93      	ldr	r2, [pc, #588]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b91      	ldr	r3, [pc, #580]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b8e      	ldr	r3, [pc, #568]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a8a      	ldr	r2, [pc, #552]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fd fbfd 	bl	8000e04 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fd fbf9 	bl	8000e04 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	; 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0fd      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x312>
 8003634:	4b7b      	ldr	r3, [pc, #492]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a7a      	ldr	r2, [pc, #488]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e02d      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x334>
 800364a:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6213      	str	r3, [r2, #32]
 8003656:	4b73      	ldr	r3, [pc, #460]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a72      	ldr	r2, [pc, #456]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x356>
 800366c:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4a6c      	ldr	r2, [pc, #432]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a66      	ldr	r2, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a63      	ldr	r2, [pc, #396]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fd fbad 	bl	8000e04 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fba9 	bl	8000e04 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0ab      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fb97 	bl	8000e04 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fd fb93 	bl	8000e04 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e095      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8081 	beq.w	800381a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d061      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d146      	bne.n	80037ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_RCC_OscConfig+0x4fc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd fb67 	bl	8000e04 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd fb63 	bl	8000e04 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e067      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	4b35      	ldr	r3, [pc, #212]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d108      	bne.n	8003774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003762:	4b30      	ldr	r3, [pc, #192]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	492d      	ldr	r1, [pc, #180]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a19      	ldr	r1, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	430b      	orrs	r3, r1
 8003786:	4927      	ldr	r1, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x4fc>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fd fb37 	bl	8000e04 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7fd fb33 	bl	8000e04 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e037      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x46a>
 80037b8:	e02f      	b.n	800381a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_RCC_OscConfig+0x4fc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd fb20 	bl	8000e04 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fb1c 	bl	8000e04 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e020      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x498>
 80037e6:	e018      	b.n	800381a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e013      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	429a      	cmp	r2, r3
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	42420060 	.word	0x42420060

08003830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0d0      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b6a      	ldr	r3, [pc, #424]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d910      	bls.n	8003874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4965      	ldr	r1, [pc, #404]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003896:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d040      	beq.n	8003950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d115      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e073      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06b      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4936      	ldr	r1, [pc, #216]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd fa70 	bl	8000e04 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fd fa6c 	bl	8000e04 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e053      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b27      	ldr	r3, [pc, #156]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d210      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4922      	ldr	r1, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4601      	mov	r1, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	5cd3      	ldrb	r3, [r2, r3]
 80039d2:	fa21 f303 	lsr.w	r3, r1, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1cc>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1d0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f9ce 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40022000 	.word	0x40022000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	08007ee0 	.word	0x08007ee0
 80039fc:	20000000 	.word	0x20000000
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	b490      	push	{r4, r7}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a0c:	1d3c      	adds	r4, r7, #4
 8003a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a14:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x46>
 8003a42:	e02d      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a46:	623b      	str	r3, [r7, #32]
      break;
 8003a48:	e02d      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	0c9b      	lsrs	r3, r3, #18
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a56:	4413      	add	r3, r2
 8003a58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a68:	4b14      	ldr	r3, [pc, #80]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c5b      	lsrs	r3, r3, #17
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a82:	fb02 f203 	mul.w	r2, r2, r3
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	e004      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa2:	623b      	str	r3, [r7, #32]
      break;
 8003aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc90      	pop	{r4, r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	08007e84 	.word	0x08007e84
 8003ab8:	08007e94 	.word	0x08007e94
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	003d0900 	.word	0x003d0900

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff2 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4a03      	ldr	r2, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08007ef0 	.word	0x08007ef0

08003b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <RCC_Delay+0x34>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <RCC_Delay+0x38>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b20:	bf00      	nop
  }
  while (Delay --);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f9      	bne.n	8003b20 <RCC_Delay+0x1c>
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	10624dd3 	.word	0x10624dd3

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d07d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b60:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b76:	61d3      	str	r3, [r2, #28]
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d118      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a42      	ldr	r2, [pc, #264]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba0:	f7fd f930 	bl	8000e04 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7fd f92c 	bl	8000e04 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e06d      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d027      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fd f8fb 	bl	8000e04 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd f8f7 	bl	8000e04 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e036      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ee      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4917      	ldr	r1, [pc, #92]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42420440 	.word	0x42420440

08003cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 0014 	add.w	r0, r7, #20
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	b004      	add	sp, #16
 8003cca:	4770      	bx	lr

08003ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ce0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4013      	ands	r3, r2
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d44:	b084      	sub	sp, #16
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	f107 0014 	add.w	r0, r7, #20
 8003d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	b004      	add	sp, #16
 8003d82:	4770      	bx	lr

08003d84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b09b      	sub	sp, #108	; 0x6c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	78db      	ldrb	r3, [r3, #3]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d81f      	bhi.n	8003df6 <USB_ActivateEndpoint+0x72>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <USB_ActivateEndpoint+0x38>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003dff 	.word	0x08003dff
 8003dc8:	08003ddb 	.word	0x08003ddb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dd8:	e012      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003de2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003de6:	e00b      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003de8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003df4:	e004      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dfc:	e000      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
      break;
 8003dfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	7b1b      	ldrb	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 8149 	bne.w	8004104 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8084 	beq.w	8003f84 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	88db      	ldrh	r3, [r3, #6]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	81fb      	strh	r3, [r7, #14]
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01b      	beq.n	8003f00 <USB_ActivateEndpoint+0x17c>
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	81bb      	strh	r3, [r7, #12]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	89bb      	ldrh	r3, [r7, #12]
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	78db      	ldrb	r3, [r3, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d020      	beq.n	8003f4a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1e:	813b      	strh	r3, [r7, #8]
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	f083 0320 	eor.w	r3, r3, #32
 8003f26:	813b      	strh	r3, [r7, #8]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8013      	strh	r3, [r2, #0]
 8003f48:	e27f      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	817b      	strh	r3, [r7, #10]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
 8003f82:	e262      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	4413      	add	r3, r2
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	88db      	ldrh	r3, [r3, #6]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	4413      	add	r3, r2
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	011a      	lsls	r2, r3, #4
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d112      	bne.n	800400a <USB_ActivateEndpoint+0x286>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29a      	uxth	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e02f      	b.n	800406a <USB_ActivateEndpoint+0x2e6>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b3e      	cmp	r3, #62	; 0x3e
 8004010:	d813      	bhi.n	800403a <USB_ActivateEndpoint+0x2b6>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <USB_ActivateEndpoint+0x2a8>
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	3301      	adds	r3, #1
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402e:	b29b      	uxth	r3, r3
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	b29a      	uxth	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	e017      	b.n	800406a <USB_ActivateEndpoint+0x2e6>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	663b      	str	r3, [r7, #96]	; 0x60
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <USB_ActivateEndpoint+0x2d0>
 800404e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004050:	3b01      	subs	r3, #1
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004056:	b29b      	uxth	r3, r3
 8004058:	029b      	lsls	r3, r3, #10
 800405a:	b29b      	uxth	r3, r3
 800405c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004064:	b29a      	uxth	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	83fb      	strh	r3, [r7, #30]
 8004078:	8bfb      	ldrh	r3, [r7, #30]
 800407a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <USB_ActivateEndpoint+0x336>
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	83bb      	strh	r3, [r7, #28]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	8bbb      	ldrh	r3, [r7, #28]
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	837b      	strh	r3, [r7, #26]
 80040d2:	8b7b      	ldrh	r3, [r7, #26]
 80040d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040d8:	837b      	strh	r3, [r7, #26]
 80040da:	8b7b      	ldrh	r3, [r7, #26]
 80040dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e0:	837b      	strh	r3, [r7, #26]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	8b7b      	ldrh	r3, [r7, #26]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
 8004102:	e1a2      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65bb      	str	r3, [r7, #88]	; 0x58
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	4413      	add	r3, r2
 8004152:	65bb      	str	r3, [r7, #88]	; 0x58
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	011a      	lsls	r2, r3, #4
 800415a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415c:	4413      	add	r3, r2
 800415e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004162:	657b      	str	r3, [r7, #84]	; 0x54
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	891b      	ldrh	r3, [r3, #8]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	4413      	add	r3, r2
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	011a      	lsls	r2, r3, #4
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	4413      	add	r3, r2
 8004192:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	895b      	ldrh	r3, [r3, #10]
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 8091 	bne.w	80042d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01b      	beq.n	8004202 <USB_ActivateEndpoint+0x47e>
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	b29b      	uxth	r3, r3
 8004200:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004210:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01b      	beq.n	8004252 <USB_ActivateEndpoint+0x4ce>
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	86bb      	strh	r3, [r7, #52]	; 0x34
 800426a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800426c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004270:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004272:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004274:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004278:	86bb      	strh	r3, [r7, #52]	; 0x34
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
 80042d2:	e0ba      	b.n	800444a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01d      	beq.n	800432c <USB_ActivateEndpoint+0x5a8>
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800433c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <USB_ActivateEndpoint+0x600>
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d024      	beq.n	80043d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043aa:	f083 0320 	eor.w	r3, r3, #32
 80043ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
 80043d4:	e01d      	b.n	8004412 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800444a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800444e:	4618      	mov	r0, r3
 8004450:	376c      	adds	r7, #108	; 0x6c
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004458:	b480      	push	{r7}
 800445a:	b08d      	sub	sp, #52	; 0x34
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	7b1b      	ldrb	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 808e 	bne.w	8004588 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d044      	beq.n	80044fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	81bb      	strh	r3, [r7, #12]
 8004482:	89bb      	ldrh	r3, [r7, #12]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <USB_DeactivateEndpoint+0x6c>
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	817b      	strh	r3, [r7, #10]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044da:	813b      	strh	r3, [r7, #8]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]
 80044fc:	e192      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	827b      	strh	r3, [r7, #18]
 800450c:	8a7b      	ldrh	r3, [r7, #18]
 800450e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <USB_DeactivateEndpoint+0xf6>
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452c:	823b      	strh	r3, [r7, #16]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	441a      	add	r2, r3
 8004538:	8a3b      	ldrh	r3, [r7, #16]
 800453a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454a:	b29b      	uxth	r3, r3
 800454c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	81fb      	strh	r3, [r7, #14]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	441a      	add	r2, r3
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	b29b      	uxth	r3, r3
 8004584:	8013      	strh	r3, [r2, #0]
 8004586:	e14d      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 80a5 	bne.w	80046dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	843b      	strh	r3, [r7, #32]
 80045a0:	8c3b      	ldrh	r3, [r7, #32]
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01b      	beq.n	80045e2 <USB_DeactivateEndpoint+0x18a>
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	83fb      	strh	r3, [r7, #30]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	8bfb      	ldrh	r3, [r7, #30]
 80045ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	83bb      	strh	r3, [r7, #28]
 80045f0:	8bbb      	ldrh	r3, [r7, #28]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <USB_DeactivateEndpoint+0x1da>
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	837b      	strh	r3, [r7, #26]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004648:	833b      	strh	r3, [r7, #24]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	8b3b      	ldrh	r3, [r7, #24]
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	82fb      	strh	r3, [r7, #22]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8afb      	ldrh	r3, [r7, #22]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	82bb      	strh	r3, [r7, #20]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	8abb      	ldrh	r3, [r7, #20]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e0a3      	b.n	8004824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <USB_DeactivateEndpoint+0x2d4>
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	857b      	strh	r3, [r7, #42]	; 0x2a
 800473a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01b      	beq.n	800477c <USB_DeactivateEndpoint+0x324>
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	853b      	strh	r3, [r7, #40]	; 0x28
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	847b      	strh	r3, [r7, #34]	; 0x22
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3734      	adds	r7, #52	; 0x34
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0c4      	sub	sp, #272	; 0x110
 8004834:	af00      	add	r7, sp, #0
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	6018      	str	r0, [r3, #0]
 800483a:	463b      	mov	r3, r7
 800483c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 8557 	bne.w	80052f8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	463b      	mov	r3, r7
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d905      	bls.n	8004866 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800485a:	463b      	mov	r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004864:	e004      	b.n	8004870 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004870:	463b      	mov	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d12c      	bne.n	80048d4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6959      	ldr	r1, [r3, #20]
 8004880:	463b      	mov	r3, r7
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	88da      	ldrh	r2, [r3, #6]
 8004886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488a:	b29b      	uxth	r3, r3
 800488c:	1d38      	adds	r0, r7, #4
 800488e:	6800      	ldr	r0, [r0, #0]
 8004890:	f001 fa2c 	bl	8005cec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	463b      	mov	r3, r7
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	011a      	lsls	r2, r3, #4
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4413      	add	r3, r2
 80048b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f107 0310 	add.w	r3, r7, #16
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	f000 bcdd 	b.w	800528e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048d4:	463b      	mov	r3, r7
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	78db      	ldrb	r3, [r3, #3]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	f040 8347 	bne.w	8004f6e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048e0:	463b      	mov	r3, r7
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	f240 82eb 	bls.w	8004ec8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	463b      	mov	r3, r7
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800492e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004936:	463b      	mov	r3, r7
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	463b      	mov	r3, r7
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	463b      	mov	r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8159 	beq.w	8004c16 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	463b      	mov	r3, r7
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d164      	bne.n	8004a3e <USB_EPStartXfer+0x20e>
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	4413      	add	r3, r2
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498c:	463b      	mov	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	011a      	lsls	r2, r3, #4
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	4413      	add	r3, r2
 8004998:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d112      	bne.n	80049cc <USB_EPStartXfer+0x19c>
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e054      	b.n	8004a76 <USB_EPStartXfer+0x246>
 80049cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d0:	2b3e      	cmp	r3, #62	; 0x3e
 80049d2:	d817      	bhi.n	8004a04 <USB_EPStartXfer+0x1d4>
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <USB_EPStartXfer+0x1c4>
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ee:	3301      	adds	r3, #1
 80049f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	e038      	b.n	8004a76 <USB_EPStartXfer+0x246>
 8004a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <USB_EPStartXfer+0x1f4>
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e01b      	b.n	8004a76 <USB_EPStartXfer+0x246>
 8004a3e:	463b      	mov	r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d116      	bne.n	8004a76 <USB_EPStartXfer+0x246>
 8004a48:	1d3b      	adds	r3, r7, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	4413      	add	r3, r2
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	011a      	lsls	r2, r3, #4
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	4413      	add	r3, r2
 8004a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a76:	463b      	mov	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a80:	463b      	mov	r3, r7
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6959      	ldr	r1, [r3, #20]
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a90:	1d38      	adds	r0, r7, #4
 8004a92:	6800      	ldr	r0, [r0, #0]
 8004a94:	f001 f92a 	bl	8005cec <USB_WritePMA>
            ep->xfer_buff += len;
 8004a98:	463b      	mov	r3, r7
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	441a      	add	r2, r3
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004aaa:	463b      	mov	r3, r7
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d909      	bls.n	8004ace <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004aba:	463b      	mov	r3, r7
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e008      	b.n	8004ae0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004ad8:	463b      	mov	r3, r7
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d164      	bne.n	8004bb4 <USB_EPStartXfer+0x384>
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	463b      	mov	r3, r7
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	011a      	lsls	r2, r3, #4
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d112      	bne.n	8004b42 <USB_EPStartXfer+0x312>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	e057      	b.n	8004bf2 <USB_EPStartXfer+0x3c2>
 8004b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b46:	2b3e      	cmp	r3, #62	; 0x3e
 8004b48:	d817      	bhi.n	8004b7a <USB_EPStartXfer+0x34a>
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <USB_EPStartXfer+0x33a>
 8004b60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b64:	3301      	adds	r3, #1
 8004b66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	e03b      	b.n	8004bf2 <USB_EPStartXfer+0x3c2>
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <USB_EPStartXfer+0x36a>
 8004b90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e01e      	b.n	8004bf2 <USB_EPStartXfer+0x3c2>
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d119      	bne.n	8004bf2 <USB_EPStartXfer+0x3c2>
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	4413      	add	r3, r2
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	4413      	add	r3, r2
 8004be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	891b      	ldrh	r3, [r3, #8]
 8004bf8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6959      	ldr	r1, [r3, #20]
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004c0c:	1d38      	adds	r0, r7, #4
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	f001 f86c 	bl	8005cec <USB_WritePMA>
 8004c14:	e33b      	b.n	800528e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d164      	bne.n	8004cea <USB_EPStartXfer+0x4ba>
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	4413      	add	r3, r2
 8004c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c38:	463b      	mov	r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	011a      	lsls	r2, r3, #4
 8004c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c42:	4413      	add	r3, r2
 8004c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d112      	bne.n	8004c78 <USB_EPStartXfer+0x448>
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	801a      	strh	r2, [r3, #0]
 8004c76:	e057      	b.n	8004d28 <USB_EPStartXfer+0x4f8>
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7e:	d817      	bhi.n	8004cb0 <USB_EPStartXfer+0x480>
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <USB_EPStartXfer+0x470>
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	029b      	lsls	r3, r3, #10
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e03b      	b.n	8004d28 <USB_EPStartXfer+0x4f8>
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <USB_EPStartXfer+0x4a0>
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	029b      	lsls	r3, r3, #10
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	e01e      	b.n	8004d28 <USB_EPStartXfer+0x4f8>
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d119      	bne.n	8004d28 <USB_EPStartXfer+0x4f8>
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d08:	4413      	add	r3, r2
 8004d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	011a      	lsls	r2, r3, #4
 8004d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d16:	4413      	add	r3, r2
 8004d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d28:	463b      	mov	r3, r7
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	891b      	ldrh	r3, [r3, #8]
 8004d2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6959      	ldr	r1, [r3, #20]
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d42:	1d38      	adds	r0, r7, #4
 8004d44:	6800      	ldr	r0, [r0, #0]
 8004d46:	f000 ffd1 	bl	8005cec <USB_WritePMA>
            ep->xfer_buff += len;
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d54:	441a      	add	r2, r3
 8004d56:	463b      	mov	r3, r7
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6a1a      	ldr	r2, [r3, #32]
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d909      	bls.n	8004d80 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	621a      	str	r2, [r3, #32]
 8004d7e:	e008      	b.n	8004d92 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	647b      	str	r3, [r7, #68]	; 0x44
 8004d98:	463b      	mov	r3, r7
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d164      	bne.n	8004e6c <USB_EPStartXfer+0x63c>
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db6:	4413      	add	r3, r2
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011a      	lsls	r2, r3, #4
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d112      	bne.n	8004dfa <USB_EPStartXfer+0x5ca>
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e054      	b.n	8004ea4 <USB_EPStartXfer+0x674>
 8004dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004e00:	d817      	bhi.n	8004e32 <USB_EPStartXfer+0x602>
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <USB_EPStartXfer+0x5f2>
 8004e18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e038      	b.n	8004ea4 <USB_EPStartXfer+0x674>
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <USB_EPStartXfer+0x622>
 8004e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e01b      	b.n	8004ea4 <USB_EPStartXfer+0x674>
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d116      	bne.n	8004ea4 <USB_EPStartXfer+0x674>
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	4413      	add	r3, r2
 8004e86:	647b      	str	r3, [r7, #68]	; 0x44
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	011a      	lsls	r2, r3, #4
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	4413      	add	r3, r2
 8004e94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e98:	643b      	str	r3, [r7, #64]	; 0x40
 8004e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	895b      	ldrh	r3, [r3, #10]
 8004eaa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6959      	ldr	r1, [r3, #20]
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ebe:	1d38      	adds	r0, r7, #4
 8004ec0:	6800      	ldr	r0, [r0, #0]
 8004ec2:	f000 ff13 	bl	8005cec <USB_WritePMA>
 8004ec6:	e1e2      	b.n	800528e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ef0:	1d3b      	adds	r3, r7, #4
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2a:	4413      	add	r3, r2
 8004f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	891b      	ldrh	r3, [r3, #8]
 8004f50:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6959      	ldr	r1, [r3, #20]
 8004f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f64:	1d38      	adds	r0, r7, #4
 8004f66:	6800      	ldr	r0, [r0, #0]
 8004f68:	f000 fec0 	bl	8005cec <USB_WritePMA>
 8004f6c:	e18f      	b.n	800528e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 808f 	beq.w	80050a8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f90:	463b      	mov	r3, r7
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d164      	bne.n	8005064 <USB_EPStartXfer+0x834>
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fae:	4413      	add	r3, r2
 8004fb0:	673b      	str	r3, [r7, #112]	; 0x70
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	011a      	lsls	r2, r3, #4
 8004fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d112      	bne.n	8004ff2 <USB_EPStartXfer+0x7c2>
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e054      	b.n	800509c <USB_EPStartXfer+0x86c>
 8004ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff8:	d817      	bhi.n	800502a <USB_EPStartXfer+0x7fa>
 8004ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d004      	beq.n	800501a <USB_EPStartXfer+0x7ea>
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	3301      	adds	r3, #1
 8005016:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29a      	uxth	r2, r3
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e038      	b.n	800509c <USB_EPStartXfer+0x86c>
 800502a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <USB_EPStartXfer+0x81a>
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	3b01      	subs	r3, #1
 8005046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	b29b      	uxth	r3, r3
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	b29b      	uxth	r3, r3
 8005054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505c:	b29a      	uxth	r2, r3
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e01b      	b.n	800509c <USB_EPStartXfer+0x86c>
 8005064:	463b      	mov	r3, r7
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d116      	bne.n	800509c <USB_EPStartXfer+0x86c>
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507c:	4413      	add	r3, r2
 800507e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	011a      	lsls	r2, r3, #4
 8005088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508a:	4413      	add	r3, r2
 800508c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	b29a      	uxth	r2, r3
 8005098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800509a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800509c:	463b      	mov	r3, r7
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	895b      	ldrh	r3, [r3, #10]
 80050a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80050a6:	e097      	b.n	80051d8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d168      	bne.n	8005184 <USB_EPStartXfer+0x954>
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ca:	4413      	add	r3, r2
 80050cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050dc:	4413      	add	r3, r2
 80050de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d112      	bne.n	8005112 <USB_EPStartXfer+0x8e2>
 80050ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e05d      	b.n	80051ce <USB_EPStartXfer+0x99e>
 8005112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d817      	bhi.n	800514a <USB_EPStartXfer+0x91a>
 800511a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <USB_EPStartXfer+0x90a>
 8005130:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005134:	3301      	adds	r3, #1
 8005136:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800513a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29a      	uxth	r2, r3
 8005144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e041      	b.n	80051ce <USB_EPStartXfer+0x99e>
 800514a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <USB_EPStartXfer+0x93a>
 8005160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005164:	3b01      	subs	r3, #1
 8005166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800516a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517c:	b29a      	uxth	r2, r3
 800517e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e024      	b.n	80051ce <USB_EPStartXfer+0x99e>
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11f      	bne.n	80051ce <USB_EPStartXfer+0x99e>
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a6:	4413      	add	r3, r2
 80051a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	891b      	ldrh	r3, [r3, #8]
 80051d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6959      	ldr	r1, [r3, #20]
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051e8:	1d38      	adds	r0, r7, #4
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	f000 fd7e 	bl	8005cec <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d122      	bne.n	8005240 <USB_EPStartXfer+0xa10>
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
 800523e:	e026      	b.n	800528e <USB_EPStartXfer+0xa5e>
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d121      	bne.n	800528e <USB_EPStartXfer+0xa5e>
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	463b      	mov	r3, r7
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005264:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f107 020e 	add.w	r2, r7, #14
 80052a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ac:	8013      	strh	r3, [r2, #0]
 80052ae:	f107 030e 	add.w	r3, r7, #14
 80052b2:	f107 020e 	add.w	r2, r7, #14
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	f082 0210 	eor.w	r2, r2, #16
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	f107 030e 	add.w	r3, r7, #14
 80052c2:	f107 020e 	add.w	r2, r7, #14
 80052c6:	8812      	ldrh	r2, [r2, #0]
 80052c8:	f082 0220 	eor.w	r2, r2, #32
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	463b      	mov	r3, r7
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	f107 030e 	add.w	r3, r7, #14
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e3b5      	b.n	8005a64 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	7b1b      	ldrb	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8090 	bne.w	8005424 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d90e      	bls.n	8005332 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	619a      	str	r2, [r3, #24]
 8005330:	e008      	b.n	8005344 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2200      	movs	r2, #0
 8005342:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005354:	b29b      	uxth	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800535c:	4413      	add	r3, r2
 800535e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	011a      	lsls	r2, r3, #4
 800536a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800536e:	4413      	add	r3, r2
 8005370:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <USB_EPStartXfer+0xb7e>
 8005380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800538c:	b29a      	uxth	r2, r3
 800538e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e32c      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
 80053ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b2:	2b3e      	cmp	r3, #62	; 0x3e
 80053b4:	d818      	bhi.n	80053e8 <USB_EPStartXfer+0xbb8>
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <USB_EPStartXfer+0xba6>
 80053cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053d0:	3301      	adds	r3, #1
 80053d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29a      	uxth	r2, r3
 80053e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e30f      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
 80053e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <USB_EPStartXfer+0xbd8>
 80053fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005402:	3b01      	subs	r3, #1
 8005404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005408:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29b      	uxth	r3, r3
 8005412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541a:	b29a      	uxth	r2, r3
 800541c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	e2f1      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	78db      	ldrb	r3, [r3, #3]
 800542a:	2b02      	cmp	r3, #2
 800542c:	f040 818f 	bne.w	800574e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005430:	463b      	mov	r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d175      	bne.n	8005526 <USB_EPStartXfer+0xcf6>
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005452:	4413      	add	r3, r2
 8005454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005458:	463b      	mov	r3, r7
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	011a      	lsls	r2, r3, #4
 8005460:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005464:	4413      	add	r3, r2
 8005466:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800546a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <USB_EPStartXfer+0xc76>
 8005478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e065      	b.n	8005572 <USB_EPStartXfer+0xd42>
 80054a6:	463b      	mov	r3, r7
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b3e      	cmp	r3, #62	; 0x3e
 80054ae:	d81a      	bhi.n	80054e6 <USB_EPStartXfer+0xcb6>
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <USB_EPStartXfer+0xca4>
 80054ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ce:	3301      	adds	r3, #1
 80054d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e045      	b.n	8005572 <USB_EPStartXfer+0xd42>
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <USB_EPStartXfer+0xcda>
 8005500:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005504:	3b01      	subs	r3, #1
 8005506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800550a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e025      	b.n	8005572 <USB_EPStartXfer+0xd42>
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d120      	bne.n	8005572 <USB_EPStartXfer+0xd42>
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005548:	4413      	add	r3, r2
 800554a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800555a:	4413      	add	r3, r2
 800555c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d175      	bne.n	8005670 <USB_EPStartXfer+0xe40>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800559c:	4413      	add	r3, r2
 800559e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055a2:	463b      	mov	r3, r7
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ae:	4413      	add	r3, r2
 80055b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055b8:	463b      	mov	r3, r7
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d116      	bne.n	80055f0 <USB_EPStartXfer+0xdc0>
 80055c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e061      	b.n	80056b4 <USB_EPStartXfer+0xe84>
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b3e      	cmp	r3, #62	; 0x3e
 80055f8:	d81a      	bhi.n	8005630 <USB_EPStartXfer+0xe00>
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <USB_EPStartXfer+0xdee>
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	3301      	adds	r3, #1
 800561a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29a      	uxth	r2, r3
 8005628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e041      	b.n	80056b4 <USB_EPStartXfer+0xe84>
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <USB_EPStartXfer+0xe24>
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	3b01      	subs	r3, #1
 8005650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	b29b      	uxth	r3, r3
 800565a:	029b      	lsls	r3, r3, #10
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e021      	b.n	80056b4 <USB_EPStartXfer+0xe84>
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d11c      	bne.n	80056b4 <USB_EPStartXfer+0xe84>
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800568a:	4413      	add	r3, r2
 800568c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	011a      	lsls	r2, r3, #4
 8005698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800569c:	4413      	add	r3, r2
 800569e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 81a4 	beq.w	8005a08 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <USB_EPStartXfer+0xebc>
 80056e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10d      	bne.n	8005708 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f040 8187 	bne.w	8005a08 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 8180 	bne.w	8005a08 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
 800574c:	e15c      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 8155 	bne.w	8005a04 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d90e      	bls.n	8005788 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e008      	b.n	800579a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d16f      	bne.n	8005884 <USB_EPStartXfer+0x1054>
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057bc:	4413      	add	r3, r2
 80057be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d116      	bne.n	800580e <USB_EPStartXfer+0xfde>
 80057e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005804:	b29a      	uxth	r2, r3
 8005806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e05f      	b.n	80058ce <USB_EPStartXfer+0x109e>
 800580e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005812:	2b3e      	cmp	r3, #62	; 0x3e
 8005814:	d818      	bhi.n	8005848 <USB_EPStartXfer+0x1018>
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <USB_EPStartXfer+0x1006>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	3301      	adds	r3, #1
 8005832:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583a:	b29b      	uxth	r3, r3
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e042      	b.n	80058ce <USB_EPStartXfer+0x109e>
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2b00      	cmp	r3, #0
 800585c:	d104      	bne.n	8005868 <USB_EPStartXfer+0x1038>
 800585e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005862:	3b01      	subs	r3, #1
 8005864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800586c:	b29b      	uxth	r3, r3
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e024      	b.n	80058ce <USB_EPStartXfer+0x109e>
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d11f      	bne.n	80058ce <USB_EPStartXfer+0x109e>
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a6:	4413      	add	r3, r2
 80058a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058ac:	463b      	mov	r3, r7
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d16f      	bne.n	80059c0 <USB_EPStartXfer+0x1190>
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058f8:	4413      	add	r3, r2
 80058fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800590a:	4413      	add	r3, r2
 800590c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d116      	bne.n	800594a <USB_EPStartXfer+0x111a>
 800591c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e05e      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	2b3e      	cmp	r3, #62	; 0x3e
 8005950:	d818      	bhi.n	8005984 <USB_EPStartXfer+0x1154>
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <USB_EPStartXfer+0x1142>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	3301      	adds	r3, #1
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e041      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800598e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <USB_EPStartXfer+0x1174>
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	3b01      	subs	r3, #1
 80059a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	029b      	lsls	r3, r3, #10
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e023      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d11e      	bne.n	8005a08 <USB_EPStartXfer+0x11d8>
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059da:	4413      	add	r3, r2
 80059dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	011a      	lsls	r2, r3, #4
 80059e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	e001      	b.n	8005a08 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e02e      	b.n	8005a66 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a98:	81bb      	strh	r3, [r7, #12]
 8005a9a:	89bb      	ldrh	r3, [r7, #12]
 8005a9c:	f083 0310 	eor.w	r3, r3, #16
 8005aa0:	81bb      	strh	r3, [r7, #12]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	89bb      	ldrh	r3, [r7, #12]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
 8005ac2:	e01f      	b.n	8005b04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	81fb      	strh	r3, [r7, #14]
 8005adc:	89fb      	ldrh	r3, [r7, #14]
 8005ade:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ae2:	81fb      	strh	r3, [r7, #14]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	89fb      	ldrh	r3, [r7, #14]
 8005af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	7b1b      	ldrb	r3, [r3, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 809d 	bne.w	8005c5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d04c      	beq.n	8005bc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	823b      	strh	r3, [r7, #16]
 8005b3a:	8a3b      	ldrh	r3, [r7, #16]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <USB_EPClearStall+0x6c>
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	81fb      	strh	r3, [r7, #14]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	89fb      	ldrh	r3, [r7, #14]
 8005b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	78db      	ldrb	r3, [r3, #3]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d06c      	beq.n	8005c5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9a:	81bb      	strh	r3, [r7, #12]
 8005b9c:	89bb      	ldrh	r3, [r7, #12]
 8005b9e:	f083 0320 	eor.w	r3, r3, #32
 8005ba2:	81bb      	strh	r3, [r7, #12]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	89bb      	ldrh	r3, [r7, #12]
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
 8005bc4:	e04b      	b.n	8005c5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	82fb      	strh	r3, [r7, #22]
 8005bd4:	8afb      	ldrh	r3, [r7, #22]
 8005bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01b      	beq.n	8005c16 <USB_EPClearStall+0x106>
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	82bb      	strh	r3, [r7, #20]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	8abb      	ldrh	r3, [r7, #20]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	827b      	strh	r3, [r7, #18]
 8005c2e:	8a7b      	ldrh	r3, [r7, #18]
 8005c30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c34:	827b      	strh	r3, [r7, #18]
 8005c36:	8a7b      	ldrh	r3, [r7, #18]
 8005c38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c3c:	827b      	strh	r3, [r7, #18]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	8a7b      	ldrh	r3, [r7, #18]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b08d      	sub	sp, #52	; 0x34
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	80fb      	strh	r3, [r7, #6]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d02:	88bb      	ldrh	r3, [r7, #4]
 8005d04:	3301      	adds	r3, #1
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	005a      	lsls	r2, r3, #1
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d24:	e01e      	b.n	8005d64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	3301      	adds	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	3302      	adds	r3, #2
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	3302      	adds	r3, #2
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	3b01      	subs	r3, #1
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1dd      	bne.n	8005d26 <USB_WritePMA+0x3a>
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	3734      	adds	r7, #52	; 0x34
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b08b      	sub	sp, #44	; 0x2c
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	460b      	mov	r3, r1
 8005d84:	80fb      	strh	r3, [r7, #6]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d8a:	88bb      	ldrh	r3, [r7, #4]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	005a      	lsls	r2, r3, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	e01b      	b.n	8005de6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	3302      	adds	r3, #2
 8005dba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	3b01      	subs	r3, #1
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e0      	bne.n	8005dae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005dec:	88bb      	ldrh	r3, [r7, #4]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	701a      	strb	r2, [r3, #0]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	372c      	adds	r7, #44	; 0x2c
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7c1b      	ldrb	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d115      	bne.n	8005e56 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2e:	2202      	movs	r2, #2
 8005e30:	2181      	movs	r1, #129	; 0x81
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fe7b 	bl	8007b2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e42:	2202      	movs	r2, #2
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 fe71 	bl	8007b2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005e54:	e012      	b.n	8005e7c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e56:	2340      	movs	r3, #64	; 0x40
 8005e58:	2202      	movs	r2, #2
 8005e5a:	2181      	movs	r1, #129	; 0x81
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 fe66 	bl	8007b2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fe5d 	bl	8007b2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	2203      	movs	r2, #3
 8005e80:	2182      	movs	r1, #130	; 0x82
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 fe53 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e92:	f001 ff73 	bl	8007d7c <USBD_static_malloc>
 8005e96:	4602      	mov	r2, r0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
 8005eac:	e026      	b.n	8005efc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	7c1b      	ldrb	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 ff13 	bl	8007d10 <USBD_LL_PrepareReceive>
 8005eea:	e007      	b.n	8005efc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef2:	2340      	movs	r3, #64	; 0x40
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 ff0a 	bl	8007d10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f16:	2181      	movs	r1, #129	; 0x81
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fe2e 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f24:	2101      	movs	r1, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fe27 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f34:	2182      	movs	r1, #130	; 0x82
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fe1f 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 ff19 	bl	8007d94 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d039      	beq.n	8006012 <USBD_CDC_Setup+0x9e>
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d17c      	bne.n	800609c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	88db      	ldrh	r3, [r3, #6]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d029      	beq.n	8005ffe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da11      	bge.n	8005fd8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005fc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	88d2      	ldrh	r2, [r2, #6]
 8005fc6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f9f9 	bl	80073c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005fd6:	e068      	b.n	80060aa <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	785a      	ldrb	r2, [r3, #1]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	88db      	ldrh	r3, [r3, #6]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	88db      	ldrh	r3, [r3, #6]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fa14 	bl	8007424 <USBD_CtlPrepareRx>
      break;
 8005ffc:	e055      	b.n	80060aa <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	7850      	ldrb	r0, [r2, #1]
 800600a:	2200      	movs	r2, #0
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	4798      	blx	r3
      break;
 8006010:	e04b      	b.n	80060aa <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b0a      	cmp	r3, #10
 8006018:	d017      	beq.n	800604a <USBD_CDC_Setup+0xd6>
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d029      	beq.n	8006072 <USBD_CDC_Setup+0xfe>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d133      	bne.n	800608a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006028:	2b03      	cmp	r3, #3
 800602a:	d107      	bne.n	800603c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800602c:	f107 030c 	add.w	r3, r7, #12
 8006030:	2202      	movs	r2, #2
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f9c7 	bl	80073c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800603a:	e02e      	b.n	800609a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 f958 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006044:	2302      	movs	r3, #2
 8006046:	75fb      	strb	r3, [r7, #23]
          break;
 8006048:	e027      	b.n	800609a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006050:	2b03      	cmp	r3, #3
 8006052:	d107      	bne.n	8006064 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006054:	f107 030f 	add.w	r3, r7, #15
 8006058:	2201      	movs	r2, #1
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f9b3 	bl	80073c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006062:	e01a      	b.n	800609a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f944 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800606c:	2302      	movs	r3, #2
 800606e:	75fb      	strb	r3, [r7, #23]
          break;
 8006070:	e013      	b.n	800609a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006078:	2b03      	cmp	r3, #3
 800607a:	d00d      	beq.n	8006098 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 f938 	bl	80072f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006084:	2302      	movs	r3, #2
 8006086:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006088:	e006      	b.n	8006098 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 f931 	bl	80072f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	75fb      	strb	r3, [r7, #23]
          break;
 8006096:	e000      	b.n	800609a <USBD_CDC_Setup+0x126>
          break;
 8006098:	bf00      	nop
      }
      break;
 800609a:	e006      	b.n	80060aa <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 f928 	bl	80072f4 <USBD_CtlError>
      ret = USBD_FAIL;
 80060a4:	2302      	movs	r3, #2
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	bf00      	nop
  }

  return ret;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03a      	beq.n	8006150 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	331c      	adds	r3, #28
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d029      	beq.n	8006144 <USBD_CDC_DataIn+0x90>
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	331c      	adds	r3, #28
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	78f9      	ldrb	r1, [r7, #3]
 8006104:	68b8      	ldr	r0, [r7, #8]
 8006106:	460b      	mov	r3, r1
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4403      	add	r3, r0
 8006110:	3338      	adds	r3, #56	; 0x38
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	fbb2 f1f3 	udiv	r1, r2, r3
 8006118:	fb03 f301 	mul.w	r3, r3, r1
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d110      	bne.n	8006144 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	331c      	adds	r3, #28
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006136:	78f9      	ldrb	r1, [r7, #3]
 8006138:	2300      	movs	r3, #0
 800613a:	2200      	movs	r2, #0
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fdc4 	bl	8007cca <USBD_LL_Transmit>
 8006142:	e003      	b.n	800614c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fdef 	bl	8007d56 <USBD_LL_GetRxDataSize>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800619e:	4611      	mov	r1, r2
 80061a0:	4798      	blx	r3

    return USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d015      	beq.n	80061f6 <USBD_CDC_EP0_RxReady+0x46>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061d0:	2bff      	cmp	r3, #255	; 0xff
 80061d2:	d010      	beq.n	80061f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80061e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061ea:	b292      	uxth	r2, r2
 80061ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2243      	movs	r2, #67	; 0x43
 800620c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800620e:	4b03      	ldr	r3, [pc, #12]	; (800621c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000094 	.word	0x20000094

08006220 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2243      	movs	r2, #67	; 0x43
 800622c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800622e:	4b03      	ldr	r3, [pc, #12]	; (800623c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000050 	.word	0x20000050

08006240 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2243      	movs	r2, #67	; 0x43
 800624c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800624e:	4b03      	ldr	r3, [pc, #12]	; (800625c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	200000d8 	.word	0x200000d8

08006260 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	220a      	movs	r2, #10
 800626c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	2000000c 	.word	0x2000000c

08006280 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800628a:	2302      	movs	r3, #2
 800628c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01c      	beq.n	8006358 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006324:	2b00      	cmp	r3, #0
 8006326:	d115      	bne.n	8006354 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006346:	b29b      	uxth	r3, r3
 8006348:	2181      	movs	r1, #129	; 0x81
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fcbd 	bl	8007cca <USBD_LL_Transmit>

      return USBD_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e002      	b.n	800635a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d017      	beq.n	80063ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7c1b      	ldrb	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800638a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fcbd 	bl	8007d10 <USBD_LL_PrepareReceive>
 8006396:	e007      	b.n	80063a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	2101      	movs	r1, #1
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fcb4 	bl	8007d10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e000      	b.n	80063ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80063ac:	2302      	movs	r3, #2
  }
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063ca:	2302      	movs	r3, #2
 80063cc:	e01a      	b.n	8006404 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fb21 	bl	8007a44 <USBD_LL_Init>

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e001      	b.n	8006432 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800642e:	2302      	movs	r3, #2
 8006430:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr

0800643e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fb56 	bl	8007af8 <USBD_LL_Start>

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006476:	2302      	movs	r3, #2
 8006478:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	4611      	mov	r1, r2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fecb 	bl	800727c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b01      	cmp	r3, #1
 8006508:	d00c      	beq.n	8006524 <USBD_LL_SetupStage+0x56>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d302      	bcc.n	8006514 <USBD_LL_SetupStage+0x46>
 800650e:	2b02      	cmp	r3, #2
 8006510:	d010      	beq.n	8006534 <USBD_LL_SetupStage+0x66>
 8006512:	e017      	b.n	8006544 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f9cb 	bl	80068b8 <USBD_StdDevReq>
      break;
 8006522:	e01a      	b.n	800655a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa2d 	bl	800698c <USBD_StdItfReq>
      break;
 8006532:	e012      	b.n	800655a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fa6b 	bl	8006a18 <USBD_StdEPReq>
      break;
 8006542:	e00a      	b.n	800655a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800654a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fb30 	bl	8007bb8 <USBD_LL_StallEP>
      break;
 8006558:	bf00      	nop
  }

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d14b      	bne.n	8006610 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800657e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006586:	2b03      	cmp	r3, #3
 8006588:	d134      	bne.n	80065f4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	429a      	cmp	r2, r3
 8006594:	d919      	bls.n	80065ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d203      	bcs.n	80065b8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	e002      	b.n	80065be <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 ff4c 	bl	8007460 <USBD_CtlContinueRx>
 80065c8:	e038      	b.n	800663c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d105      	bne.n	80065ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 ff49 	bl	8007484 <USBD_CtlSendStatus>
 80065f2:	e023      	b.n	800663c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d11e      	bne.n	800663c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006606:	2100      	movs	r1, #0
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f001 fad5 	bl	8007bb8 <USBD_LL_StallEP>
 800660e:	e015      	b.n	800663c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00d      	beq.n	8006638 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006622:	2b03      	cmp	r3, #3
 8006624:	d108      	bne.n	8006638 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	7afa      	ldrb	r2, [r7, #11]
 8006630:	4611      	mov	r1, r2
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	4798      	blx	r3
 8006636:	e001      	b.n	800663c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006638:	2302      	movs	r3, #2
 800663a:	e000      	b.n	800663e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	460b      	mov	r3, r1
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d17f      	bne.n	800675a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3314      	adds	r3, #20
 800665e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006666:	2b02      	cmp	r3, #2
 8006668:	d15c      	bne.n	8006724 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	d915      	bls.n	80066a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 feb6 	bl	8007400 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006694:	2300      	movs	r3, #0
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f001 fb38 	bl	8007d10 <USBD_LL_PrepareReceive>
 80066a0:	e04e      	b.n	8006740 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	6912      	ldr	r2, [r2, #16]
 80066aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80066ae:	fb02 f201 	mul.w	r2, r2, r1
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11c      	bne.n	80066f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d316      	bcc.n	80066f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d20f      	bcs.n	80066f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2100      	movs	r1, #0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fe92 	bl	8007400 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e4:	2300      	movs	r3, #0
 80066e6:	2200      	movs	r2, #0
 80066e8:	2100      	movs	r1, #0
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f001 fb10 	bl	8007d10 <USBD_LL_PrepareReceive>
 80066f0:	e026      	b.n	8006740 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006704:	2b03      	cmp	r3, #3
 8006706:	d105      	bne.n	8006714 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f001 fa4e 	bl	8007bb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fec4 	bl	80074aa <USBD_CtlReceiveStatus>
 8006722:	e00d      	b.n	8006740 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800672a:	2b04      	cmp	r3, #4
 800672c:	d004      	beq.n	8006738 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f001 fa3c 	bl	8007bb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d11d      	bne.n	8006786 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fe83 	bl	8006456 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006758:	e015      	b.n	8006786 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800676c:	2b03      	cmp	r3, #3
 800676e:	d108      	bne.n	8006782 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	7afa      	ldrb	r2, [r7, #11]
 800677a:	4611      	mov	r1, r2
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	4798      	blx	r3
 8006780:	e001      	b.n	8006786 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006782:	2302      	movs	r3, #2
 8006784:	e000      	b.n	8006788 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f9c5 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2240      	movs	r2, #64	; 0x40
 80067b0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b4:	2340      	movs	r3, #64	; 0x40
 80067b6:	2200      	movs	r2, #0
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 f9b7 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2240      	movs	r2, #64	; 0x40
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6852      	ldr	r2, [r2, #4]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	4611      	mov	r1, r2
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	78fa      	ldrb	r2, [r7, #3]
 8006822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006866:	2b04      	cmp	r3, #4
 8006868:	d105      	bne.n	8006876 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006890:	2b03      	cmp	r3, #3
 8006892:	d10b      	bne.n	80068ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d004      	beq.n	80068dc <USBD_StdDevReq+0x24>
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d002      	beq.n	80068dc <USBD_StdDevReq+0x24>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <USBD_StdDevReq+0x34>
 80068da:	e04c      	b.n	8006976 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
      break;
 80068ea:	e049      	b.n	8006980 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d83a      	bhi.n	800696a <USBD_StdDevReq+0xb2>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <USBD_StdDevReq+0x44>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	0800694d 	.word	0x0800694d
 8006900:	08006961 	.word	0x08006961
 8006904:	0800696b 	.word	0x0800696b
 8006908:	08006957 	.word	0x08006957
 800690c:	0800696b 	.word	0x0800696b
 8006910:	0800692f 	.word	0x0800692f
 8006914:	08006925 	.word	0x08006925
 8006918:	0800696b 	.word	0x0800696b
 800691c:	08006943 	.word	0x08006943
 8006920:	08006939 	.word	0x08006939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9d4 	bl	8006cd4 <USBD_GetDescriptor>
          break;
 800692c:	e022      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb37 	bl	8006fa4 <USBD_SetAddress>
          break;
 8006936:	e01d      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb74 	bl	8007028 <USBD_SetConfig>
          break;
 8006940:	e018      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fbfd 	bl	8007144 <USBD_GetConfig>
          break;
 800694a:	e013      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fc2c 	bl	80071ac <USBD_GetStatus>
          break;
 8006954:	e00e      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fc5a 	bl	8007212 <USBD_SetFeature>
          break;
 800695e:	e009      	b.n	8006974 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc69 	bl	800723a <USBD_ClrFeature>
          break;
 8006968:	e004      	b.n	8006974 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fcc1 	bl	80072f4 <USBD_CtlError>
          break;
 8006972:	bf00      	nop
      }
      break;
 8006974:	e004      	b.n	8006980 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fcbb 	bl	80072f4 <USBD_CtlError>
      break;
 800697e:	bf00      	nop
  }

  return ret;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop

0800698c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d003      	beq.n	80069ae <USBD_StdItfReq+0x22>
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d001      	beq.n	80069ae <USBD_StdItfReq+0x22>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d12a      	bne.n	8006a04 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d81d      	bhi.n	80069f6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	889b      	ldrh	r3, [r3, #4]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d813      	bhi.n	80069ec <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d110      	bne.n	8006a00 <USBD_StdItfReq+0x74>
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fd4d 	bl	8007484 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069ea:	e009      	b.n	8006a00 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc80 	bl	80072f4 <USBD_CtlError>
          break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc7b 	bl	80072f4 <USBD_CtlError>
          break;
 80069fe:	e000      	b.n	8006a02 <USBD_StdItfReq+0x76>
          break;
 8006a00:	bf00      	nop
      }
      break;
 8006a02:	e004      	b.n	8006a0e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc74 	bl	80072f4 <USBD_CtlError>
      break;
 8006a0c:	bf00      	nop
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	889b      	ldrh	r3, [r3, #4]
 8006a2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d004      	beq.n	8006a42 <USBD_StdEPReq+0x2a>
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d002      	beq.n	8006a42 <USBD_StdEPReq+0x2a>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <USBD_StdEPReq+0x3a>
 8006a40:	e13d      	b.n	8006cbe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
      break;
 8006a50:	e13a      	b.n	8006cc8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d10a      	bne.n	8006a74 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	e12a      	b.n	8006cca <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d03e      	beq.n	8006afa <USBD_StdEPReq+0xe2>
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d002      	beq.n	8006a86 <USBD_StdEPReq+0x6e>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d070      	beq.n	8006b66 <USBD_StdEPReq+0x14e>
 8006a84:	e115      	b.n	8006cb2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d002      	beq.n	8006a96 <USBD_StdEPReq+0x7e>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d015      	beq.n	8006ac0 <USBD_StdEPReq+0xa8>
 8006a94:	e02b      	b.n	8006aee <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <USBD_StdEPReq+0x9e>
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	2b80      	cmp	r3, #128	; 0x80
 8006aa0:	d009      	beq.n	8006ab6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 f886 	bl	8007bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 f882 	bl	8007bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ab4:	e020      	b.n	8006af8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fc1b 	bl	80072f4 <USBD_CtlError>
              break;
 8006abe:	e01b      	b.n	8006af8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	885b      	ldrh	r3, [r3, #2]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10e      	bne.n	8006ae6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <USBD_StdEPReq+0xce>
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d008      	beq.n	8006ae6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 f869 	bl	8007bb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fccc 	bl	8007484 <USBD_CtlSendStatus>

              break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fbff 	bl	80072f4 <USBD_CtlError>
              break;
 8006af6:	bf00      	nop
          }
          break;
 8006af8:	e0e0      	b.n	8006cbc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d002      	beq.n	8006b0a <USBD_StdEPReq+0xf2>
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d015      	beq.n	8006b34 <USBD_StdEPReq+0x11c>
 8006b08:	e026      	b.n	8006b58 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00c      	beq.n	8006b2a <USBD_StdEPReq+0x112>
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d009      	beq.n	8006b2a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 f84c 	bl	8007bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 f848 	bl	8007bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b28:	e01c      	b.n	8006b64 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbe1 	bl	80072f4 <USBD_CtlError>
              break;
 8006b32:	e017      	b.n	8006b64 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d112      	bne.n	8006b62 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f853 	bl	8007bf6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc97 	bl	8007484 <USBD_CtlSendStatus>
              }
              break;
 8006b56:	e004      	b.n	8006b62 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fbca 	bl	80072f4 <USBD_CtlError>
              break;
 8006b60:	e000      	b.n	8006b64 <USBD_StdEPReq+0x14c>
              break;
 8006b62:	bf00      	nop
          }
          break;
 8006b64:	e0aa      	b.n	8006cbc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d002      	beq.n	8006b76 <USBD_StdEPReq+0x15e>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d032      	beq.n	8006bda <USBD_StdEPReq+0x1c2>
 8006b74:	e097      	b.n	8006ca6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x174>
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b80      	cmp	r3, #128	; 0x80
 8006b80:	d004      	beq.n	8006b8c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbb5 	bl	80072f4 <USBD_CtlError>
                break;
 8006b8a:	e091      	b.n	8006cb0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da0b      	bge.n	8006bac <USBD_StdEPReq+0x194>
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	3310      	adds	r3, #16
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3304      	adds	r3, #4
 8006baa:	e00b      	b.n	8006bc4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fbf8 	bl	80073c8 <USBD_CtlSendData>
              break;
 8006bd8:	e06a      	b.n	8006cb0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da11      	bge.n	8006c06 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d117      	bne.n	8006c2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb78 	bl	80072f4 <USBD_CtlError>
                  break;
 8006c04:	e054      	b.n	8006cb0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fb65 	bl	80072f4 <USBD_CtlError>
                  break;
 8006c2a:	e041      	b.n	8006cb0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da0b      	bge.n	8006c4c <USBD_StdEPReq+0x234>
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	3310      	adds	r3, #16
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	3304      	adds	r3, #4
 8006c4a:	e00b      	b.n	8006c64 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	3304      	adds	r3, #4
 8006c64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <USBD_StdEPReq+0x25a>
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b80      	cmp	r3, #128	; 0x80
 8006c70:	d103      	bne.n	8006c7a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e00e      	b.n	8006c98 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 ffd8 	bl	8007c34 <USBD_LL_IsStallEP>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fb92 	bl	80073c8 <USBD_CtlSendData>
              break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb23 	bl	80072f4 <USBD_CtlError>
              break;
 8006cae:	bf00      	nop
          }
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb1d 	bl	80072f4 <USBD_CtlError>
          break;
 8006cba:	bf00      	nop
      }
      break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb17 	bl	80072f4 <USBD_CtlError>
      break;
 8006cc6:	bf00      	nop
  }

  return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	2b06      	cmp	r3, #6
 8006cf6:	f200 8128 	bhi.w	8006f4a <USBD_GetDescriptor+0x276>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <USBD_GetDescriptor+0x2c>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006f4b 	.word	0x08006f4b
 8006d10:	08006f4b 	.word	0x08006f4b
 8006d14:	08006eeb 	.word	0x08006eeb
 8006d18:	08006f17 	.word	0x08006f17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
      break;
 8006d32:	e112      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7c1b      	ldrb	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	f107 0208 	add.w	r2, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	2202      	movs	r2, #2
 8006d54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d56:	e100      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	f107 0208 	add.w	r2, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	2202      	movs	r2, #2
 8006d70:	701a      	strb	r2, [r3, #0]
      break;
 8006d72:	e0f2      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	885b      	ldrh	r3, [r3, #2]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	f200 80ac 	bhi.w	8006ed8 <USBD_GetDescriptor+0x204>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <USBD_GetDescriptor+0xb4>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006dd5 	.word	0x08006dd5
 8006d90:	08006e09 	.word	0x08006e09
 8006d94:	08006e3d 	.word	0x08006e3d
 8006d98:	08006e71 	.word	0x08006e71
 8006d9c:	08006ea5 	.word	0x08006ea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc2:	e091      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa94 	bl	80072f4 <USBD_CtlError>
            err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd2:	e089      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e077      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa7a 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e06f      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e05d      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa60 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e055      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e043      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa46 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e03b      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e029      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa2c 	bl	80072f4 <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e021      	b.n	8006ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e00f      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa12 	bl	80072f4 <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e007      	b.n	8006ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa0a 	bl	80072f4 <USBD_CtlError>
          err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ee6:	e038      	b.n	8006f5a <USBD_GetDescriptor+0x286>
 8006ee8:	e037      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7c1b      	ldrb	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	f107 0208 	add.w	r2, r7, #8
 8006efe:	4610      	mov	r0, r2
 8006f00:	4798      	blx	r3
 8006f02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f04:	e029      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9f3 	bl	80072f4 <USBD_CtlError>
        err++;
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	3301      	adds	r3, #1
 8006f12:	72fb      	strb	r3, [r7, #11]
      break;
 8006f14:	e021      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7c1b      	ldrb	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10d      	bne.n	8006f3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f107 0208 	add.w	r2, r7, #8
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4798      	blx	r3
 8006f2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	2207      	movs	r2, #7
 8006f36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f38:	e00f      	b.n	8006f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9d9 	bl	80072f4 <USBD_CtlError>
        err++;
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	3301      	adds	r3, #1
 8006f46:	72fb      	strb	r3, [r7, #11]
      break;
 8006f48:	e007      	b.n	8006f5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9d1 	bl	80072f4 <USBD_CtlError>
      err++;
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	3301      	adds	r3, #1
 8006f56:	72fb      	strb	r3, [r7, #11]
      break;
 8006f58:	bf00      	nop
  }

  if (err != 0U)
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11c      	bne.n	8006f9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f60:	893b      	ldrh	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d011      	beq.n	8006f8a <USBD_GetDescriptor+0x2b6>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	88db      	ldrh	r3, [r3, #6]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00d      	beq.n	8006f8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88da      	ldrh	r2, [r3, #6]
 8006f72:	893b      	ldrh	r3, [r7, #8]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bf28      	it	cs
 8006f78:	4613      	movcs	r3, r2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f7e:	893b      	ldrh	r3, [r7, #8]
 8006f80:	461a      	mov	r2, r3
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fa1f 	bl	80073c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa76 	bl	8007484 <USBD_CtlSendStatus>
 8006f98:	e000      	b.n	8006f9c <USBD_GetDescriptor+0x2c8>
    return;
 8006f9a:	bf00      	nop
    }
  }
}
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop

08006fa4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	889b      	ldrh	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d130      	bne.n	8007018 <USBD_SetAddress+0x74>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88db      	ldrh	r3, [r3, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d12c      	bne.n	8007018 <USBD_SetAddress+0x74>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc4:	d828      	bhi.n	8007018 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d104      	bne.n	8006fe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f988 	bl	80072f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe4:	e01c      	b.n	8007020 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7bfa      	ldrb	r2, [r7, #15]
 8006fea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fe4a 	bl	8007c8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fa43 	bl	8007484 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	e008      	b.n	8007020 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007016:	e003      	b.n	8007020 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f96a 	bl	80072f4 <USBD_CtlError>
  }
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	885b      	ldrh	r3, [r3, #2]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b41      	ldr	r3, [pc, #260]	; (8007140 <USBD_SetConfig+0x118>)
 800703a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800703c:	4b40      	ldr	r3, [pc, #256]	; (8007140 <USBD_SetConfig+0x118>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d904      	bls.n	800704e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f954 	bl	80072f4 <USBD_CtlError>
 800704c:	e075      	b.n	800713a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	2b02      	cmp	r3, #2
 8007056:	d002      	beq.n	800705e <USBD_SetConfig+0x36>
 8007058:	2b03      	cmp	r3, #3
 800705a:	d023      	beq.n	80070a4 <USBD_SetConfig+0x7c>
 800705c:	e062      	b.n	8007124 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800705e:	4b38      	ldr	r3, [pc, #224]	; (8007140 <USBD_SetConfig+0x118>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01a      	beq.n	800709c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <USBD_SetConfig+0x118>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2203      	movs	r2, #3
 8007074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007078:	4b31      	ldr	r3, [pc, #196]	; (8007140 <USBD_SetConfig+0x118>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff f9f3 	bl	800646a <USBD_SetClassConfig>
 8007084:	4603      	mov	r3, r0
 8007086:	2b02      	cmp	r3, #2
 8007088:	d104      	bne.n	8007094 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f931 	bl	80072f4 <USBD_CtlError>
            return;
 8007092:	e052      	b.n	800713a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f9f5 	bl	8007484 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800709a:	e04e      	b.n	800713a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f9f1 	bl	8007484 <USBD_CtlSendStatus>
        break;
 80070a2:	e04a      	b.n	800713a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070a4:	4b26      	ldr	r3, [pc, #152]	; (8007140 <USBD_SetConfig+0x118>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d112      	bne.n	80070d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80070b4:	4b22      	ldr	r3, [pc, #136]	; (8007140 <USBD_SetConfig+0x118>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <USBD_SetConfig+0x118>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff f9ef 	bl	80064a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f9da 	bl	8007484 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070d0:	e033      	b.n	800713a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80070d2:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <USBD_SetConfig+0x118>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d01d      	beq.n	800711c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff f9dd 	bl	80064a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <USBD_SetConfig+0x118>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070f8:	4b11      	ldr	r3, [pc, #68]	; (8007140 <USBD_SetConfig+0x118>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff f9b3 	bl	800646a <USBD_SetClassConfig>
 8007104:	4603      	mov	r3, r0
 8007106:	2b02      	cmp	r3, #2
 8007108:	d104      	bne.n	8007114 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f8f1 	bl	80072f4 <USBD_CtlError>
            return;
 8007112:	e012      	b.n	800713a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f9b5 	bl	8007484 <USBD_CtlSendStatus>
        break;
 800711a:	e00e      	b.n	800713a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9b1 	bl	8007484 <USBD_CtlSendStatus>
        break;
 8007122:	e00a      	b.n	800713a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f8e4 	bl	80072f4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <USBD_SetConfig+0x118>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f9b8 	bl	80064a8 <USBD_ClrClassConfig>
        break;
 8007138:	bf00      	nop
    }
  }
}
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	2000019a 	.word	0x2000019a

08007144 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	88db      	ldrh	r3, [r3, #6]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d004      	beq.n	8007160 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f8cb 	bl	80072f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800715e:	e021      	b.n	80071a4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	2b01      	cmp	r3, #1
 8007168:	db17      	blt.n	800719a <USBD_GetConfig+0x56>
 800716a:	2b02      	cmp	r3, #2
 800716c:	dd02      	ble.n	8007174 <USBD_GetConfig+0x30>
 800716e:	2b03      	cmp	r3, #3
 8007170:	d00b      	beq.n	800718a <USBD_GetConfig+0x46>
 8007172:	e012      	b.n	800719a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3308      	adds	r3, #8
 800717e:	2201      	movs	r2, #1
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f920 	bl	80073c8 <USBD_CtlSendData>
        break;
 8007188:	e00c      	b.n	80071a4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	2201      	movs	r2, #1
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f918 	bl	80073c8 <USBD_CtlSendData>
        break;
 8007198:	e004      	b.n	80071a4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8a9 	bl	80072f4 <USBD_CtlError>
        break;
 80071a2:	bf00      	nop
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071bc:	3b01      	subs	r3, #1
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d81e      	bhi.n	8007200 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d004      	beq.n	80071d4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f891 	bl	80072f4 <USBD_CtlError>
        break;
 80071d2:	e01a      	b.n	800720a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f043 0202 	orr.w	r2, r3, #2
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	330c      	adds	r3, #12
 80071f4:	2202      	movs	r2, #2
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8e5 	bl	80073c8 <USBD_CtlSendData>
      break;
 80071fe:	e004      	b.n	800720a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f876 	bl	80072f4 <USBD_CtlError>
      break;
 8007208:	bf00      	nop
  }
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d106      	bne.n	8007232 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f929 	bl	8007484 <USBD_CtlSendStatus>
  }
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	3b01      	subs	r3, #1
 800724c:	2b02      	cmp	r3, #2
 800724e:	d80b      	bhi.n	8007268 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d10c      	bne.n	8007272 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f90f 	bl	8007484 <USBD_CtlSendStatus>
      }
      break;
 8007266:	e004      	b.n	8007272 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f842 	bl	80072f4 <USBD_CtlError>
      break;
 8007270:	e000      	b.n	8007274 <USBD_ClrFeature+0x3a>
      break;
 8007272:	bf00      	nop
  }
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	785a      	ldrb	r2, [r3, #1]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3302      	adds	r3, #2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	3303      	adds	r3, #3
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	3304      	adds	r3, #4
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	3305      	adds	r3, #5
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	4413      	add	r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	3306      	adds	r3, #6
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	3307      	adds	r3, #7
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4413      	add	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	80da      	strh	r2, [r3, #6]

}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc59 	bl	8007bb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc55 	bl	8007bb8 <USBD_LL_StallEP>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d032      	beq.n	8007392 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f834 	bl	800739a <USBD_GetLen>
 8007332:	4603      	mov	r3, r0
 8007334:	3301      	adds	r3, #1
 8007336:	b29b      	uxth	r3, r3
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	75fa      	strb	r2, [r7, #23]
 8007346:	461a      	mov	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4413      	add	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	75fa      	strb	r2, [r7, #23]
 8007358:	461a      	mov	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	2203      	movs	r2, #3
 8007360:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007362:	e012      	b.n	800738a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	60fa      	str	r2, [r7, #12]
 800736a:	7dfa      	ldrb	r2, [r7, #23]
 800736c:	1c51      	adds	r1, r2, #1
 800736e:	75f9      	strb	r1, [r7, #23]
 8007370:	4611      	mov	r1, r2
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	440a      	add	r2, r1
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	75fa      	strb	r2, [r7, #23]
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e8      	bne.n	8007364 <USBD_GetString+0x4e>
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073a6:	e005      	b.n	80073b4 <USBD_GetLen+0x1a>
  {
    len++;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	3301      	adds	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3301      	adds	r3, #1
 80073b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f5      	bne.n	80073a8 <USBD_GetLen+0xe>
  }

  return len;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr

080073c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2202      	movs	r2, #2
 80073da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	2100      	movs	r1, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fc6a 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fc58 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2203      	movs	r2, #3
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	2100      	movs	r1, #0
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fc5d 	bl	8007d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	2100      	movs	r1, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fc4b 	bl	8007d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2204      	movs	r2, #4
 8007490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007494:	2300      	movs	r3, #0
 8007496:	2200      	movs	r2, #0
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fc15 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2205      	movs	r2, #5
 80074b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc25 	bl	8007d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074d4:	2200      	movs	r2, #0
 80074d6:	4912      	ldr	r1, [pc, #72]	; (8007520 <MX_USB_DEVICE_Init+0x50>)
 80074d8:	4812      	ldr	r0, [pc, #72]	; (8007524 <MX_USB_DEVICE_Init+0x54>)
 80074da:	f7fe ff6c 	bl	80063b6 <USBD_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074e4:	f7f9 fac6 	bl	8000a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074e8:	490f      	ldr	r1, [pc, #60]	; (8007528 <MX_USB_DEVICE_Init+0x58>)
 80074ea:	480e      	ldr	r0, [pc, #56]	; (8007524 <MX_USB_DEVICE_Init+0x54>)
 80074ec:	f7fe ff8e 	bl	800640c <USBD_RegisterClass>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074f6:	f7f9 fabd 	bl	8000a74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074fa:	490c      	ldr	r1, [pc, #48]	; (800752c <MX_USB_DEVICE_Init+0x5c>)
 80074fc:	4809      	ldr	r0, [pc, #36]	; (8007524 <MX_USB_DEVICE_Init+0x54>)
 80074fe:	f7fe febf 	bl	8006280 <USBD_CDC_RegisterInterface>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007508:	f7f9 fab4 	bl	8000a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800750c:	4805      	ldr	r0, [pc, #20]	; (8007524 <MX_USB_DEVICE_Init+0x54>)
 800750e:	f7fe ff96 	bl	800643e <USBD_Start>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007518:	f7f9 faac 	bl	8000a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}
 8007520:	2000012c 	.word	0x2000012c
 8007524:	200010b8 	.word	0x200010b8
 8007528:	20000018 	.word	0x20000018
 800752c:	2000011c 	.word	0x2000011c

08007530 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007534:	2200      	movs	r2, #0
 8007536:	4905      	ldr	r1, [pc, #20]	; (800754c <CDC_Init_FS+0x1c>)
 8007538:	4805      	ldr	r0, [pc, #20]	; (8007550 <CDC_Init_FS+0x20>)
 800753a:	f7fe feb7 	bl	80062ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800753e:	4905      	ldr	r1, [pc, #20]	; (8007554 <CDC_Init_FS+0x24>)
 8007540:	4803      	ldr	r0, [pc, #12]	; (8007550 <CDC_Init_FS+0x20>)
 8007542:	f7fe fecc 	bl	80062de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007546:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20001764 	.word	0x20001764
 8007550:	200010b8 	.word	0x200010b8
 8007554:	2000137c 	.word	0x2000137c

08007558 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800755c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800755e:	4618      	mov	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	bc80      	pop	{r7}
 8007564:	4770      	bx	lr
	...

08007568 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	71fb      	strb	r3, [r7, #7]
 8007574:	4613      	mov	r3, r2
 8007576:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b23      	cmp	r3, #35	; 0x23
 800757c:	d84a      	bhi.n	8007614 <CDC_Control_FS+0xac>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <CDC_Control_FS+0x1c>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	08007615 	.word	0x08007615
 8007588:	08007615 	.word	0x08007615
 800758c:	08007615 	.word	0x08007615
 8007590:	08007615 	.word	0x08007615
 8007594:	08007615 	.word	0x08007615
 8007598:	08007615 	.word	0x08007615
 800759c:	08007615 	.word	0x08007615
 80075a0:	08007615 	.word	0x08007615
 80075a4:	08007615 	.word	0x08007615
 80075a8:	08007615 	.word	0x08007615
 80075ac:	08007615 	.word	0x08007615
 80075b0:	08007615 	.word	0x08007615
 80075b4:	08007615 	.word	0x08007615
 80075b8:	08007615 	.word	0x08007615
 80075bc:	08007615 	.word	0x08007615
 80075c0:	08007615 	.word	0x08007615
 80075c4:	08007615 	.word	0x08007615
 80075c8:	08007615 	.word	0x08007615
 80075cc:	08007615 	.word	0x08007615
 80075d0:	08007615 	.word	0x08007615
 80075d4:	08007615 	.word	0x08007615
 80075d8:	08007615 	.word	0x08007615
 80075dc:	08007615 	.word	0x08007615
 80075e0:	08007615 	.word	0x08007615
 80075e4:	08007615 	.word	0x08007615
 80075e8:	08007615 	.word	0x08007615
 80075ec:	08007615 	.word	0x08007615
 80075f0:	08007615 	.word	0x08007615
 80075f4:	08007615 	.word	0x08007615
 80075f8:	08007615 	.word	0x08007615
 80075fc:	08007615 	.word	0x08007615
 8007600:	08007615 	.word	0x08007615
 8007604:	08007615 	.word	0x08007615
 8007608:	08007615 	.word	0x08007615
 800760c:	08007615 	.word	0x08007615
 8007610:	08007615 	.word	0x08007615
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007614:	bf00      	nop
  }

  return (USBD_OK);
 8007616:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop

08007624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4808      	ldr	r0, [pc, #32]	; (8007654 <CDC_Receive_FS+0x30>)
 8007632:	f7fe fe54 	bl	80062de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007636:	4807      	ldr	r0, [pc, #28]	; (8007654 <CDC_Receive_FS+0x30>)
 8007638:	f7fe fe93 	bl	8006362 <USBD_CDC_ReceivePacket>

  USB_ReadCallback(Buf, *Len);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 fa76 	bl	8000b34 <USB_ReadCallback>

  return (USBD_OK);
 8007648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200010b8 	.word	0x200010b8

08007658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007668:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <CDC_Transmit_FS+0x48>)
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800767a:	2301      	movs	r3, #1
 800767c:	e00b      	b.n	8007696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	461a      	mov	r2, r3
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4806      	ldr	r0, [pc, #24]	; (80076a0 <CDC_Transmit_FS+0x48>)
 8007686:	f7fe fe11 	bl	80062ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800768a:	4805      	ldr	r0, [pc, #20]	; (80076a0 <CDC_Transmit_FS+0x48>)
 800768c:	f7fe fe3a 	bl	8006304 <USBD_CDC_TransmitPacket>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200010b8 	.word	0x200010b8

080076a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2212      	movs	r2, #18
 80076b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076b6:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000148 	.word	0x20000148

080076c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2204      	movs	r2, #4
 80076d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076da:	4b03      	ldr	r3, [pc, #12]	; (80076e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	2000015c 	.word	0x2000015c

080076ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4907      	ldr	r1, [pc, #28]	; (8007720 <USBD_FS_ProductStrDescriptor+0x34>)
 8007702:	4808      	ldr	r0, [pc, #32]	; (8007724 <USBD_FS_ProductStrDescriptor+0x38>)
 8007704:	f7ff fe07 	bl	8007316 <USBD_GetString>
 8007708:	e004      	b.n	8007714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4904      	ldr	r1, [pc, #16]	; (8007720 <USBD_FS_ProductStrDescriptor+0x34>)
 800770e:	4805      	ldr	r0, [pc, #20]	; (8007724 <USBD_FS_ProductStrDescriptor+0x38>)
 8007710:	f7ff fe01 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20001b4c 	.word	0x20001b4c
 8007724:	08007e98 	.word	0x08007e98

08007728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	6039      	str	r1, [r7, #0]
 8007732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	4904      	ldr	r1, [pc, #16]	; (8007748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007738:	4804      	ldr	r0, [pc, #16]	; (800774c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800773a:	f7ff fdec 	bl	8007316 <USBD_GetString>
  return USBD_StrDesc;
 800773e:	4b02      	ldr	r3, [pc, #8]	; (8007748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20001b4c 	.word	0x20001b4c
 800774c:	08007eb0 	.word	0x08007eb0

08007750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	6039      	str	r1, [r7, #0]
 800775a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	221a      	movs	r2, #26
 8007760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007762:	f000 f843 	bl	80077ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007766:	4b02      	ldr	r3, [pc, #8]	; (8007770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000160 	.word	0x20000160

08007774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	4907      	ldr	r1, [pc, #28]	; (80077a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800778a:	4808      	ldr	r0, [pc, #32]	; (80077ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800778c:	f7ff fdc3 	bl	8007316 <USBD_GetString>
 8007790:	e004      	b.n	800779c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4904      	ldr	r1, [pc, #16]	; (80077a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007796:	4805      	ldr	r0, [pc, #20]	; (80077ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007798:	f7ff fdbd 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20001b4c 	.word	0x20001b4c
 80077ac:	08007ec4 	.word	0x08007ec4

080077b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4907      	ldr	r1, [pc, #28]	; (80077e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077c6:	4808      	ldr	r0, [pc, #32]	; (80077e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077c8:	f7ff fda5 	bl	8007316 <USBD_GetString>
 80077cc:	e004      	b.n	80077d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4904      	ldr	r1, [pc, #16]	; (80077e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077d4:	f7ff fd9f 	bl	8007316 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077d8:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001b4c 	.word	0x20001b4c
 80077e8:	08007ed0 	.word	0x08007ed0

080077ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <Get_SerialNum+0x44>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <Get_SerialNum+0x48>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077fe:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <Get_SerialNum+0x4c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4413      	add	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d009      	beq.n	8007826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007812:	2208      	movs	r2, #8
 8007814:	4909      	ldr	r1, [pc, #36]	; (800783c <Get_SerialNum+0x50>)
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 f814 	bl	8007844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800781c:	2204      	movs	r2, #4
 800781e:	4908      	ldr	r1, [pc, #32]	; (8007840 <Get_SerialNum+0x54>)
 8007820:	68b8      	ldr	r0, [r7, #8]
 8007822:	f000 f80f 	bl	8007844 <IntToUnicode>
  }
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	1ffff7e8 	.word	0x1ffff7e8
 8007834:	1ffff7ec 	.word	0x1ffff7ec
 8007838:	1ffff7f0 	.word	0x1ffff7f0
 800783c:	20000162 	.word	0x20000162
 8007840:	20000172 	.word	0x20000172

08007844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
 800785a:	e027      	b.n	80078ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	0f1b      	lsrs	r3, r3, #28
 8007860:	2b09      	cmp	r3, #9
 8007862:	d80b      	bhi.n	800787c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	0f1b      	lsrs	r3, r3, #28
 8007868:	b2da      	uxtb	r2, r3
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4619      	mov	r1, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	440b      	add	r3, r1
 8007874:	3230      	adds	r2, #48	; 0x30
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
 800787a:	e00a      	b.n	8007892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4619      	mov	r1, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	440b      	add	r3, r1
 800788c:	3237      	adds	r2, #55	; 0x37
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	3301      	adds	r3, #1
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	3301      	adds	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
 80078ac:	7dfa      	ldrb	r2, [r7, #23]
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d3d3      	bcc.n	800785c <IntToUnicode+0x18>
  }
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <HAL_PCD_MspInit+0x44>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d113      	bne.n	80078fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078d2:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <HAL_PCD_MspInit+0x48>)
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	4a0c      	ldr	r2, [pc, #48]	; (8007908 <HAL_PCD_MspInit+0x48>)
 80078d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078dc:	61d3      	str	r3, [r2, #28]
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <HAL_PCD_MspInit+0x48>)
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80078ea:	2200      	movs	r2, #0
 80078ec:	2100      	movs	r1, #0
 80078ee:	2014      	movs	r0, #20
 80078f0:	f7f9 fb8b 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80078f4:	2014      	movs	r0, #20
 80078f6:	f7f9 fba4 	bl	8001042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40005c00 	.word	0x40005c00
 8007908:	40021000 	.word	0x40021000

0800790c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fdd3 	bl	80064ce <USBD_LL_SetupStage>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007942:	78fa      	ldrb	r2, [r7, #3]
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	440b      	add	r3, r1
 8007950:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	4619      	mov	r1, r3
 800795a:	f7fe fe03 	bl	8006564 <USBD_LL_DataOutStage>
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	440b      	add	r3, r1
 8007986:	333c      	adds	r3, #60	; 0x3c
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	4619      	mov	r1, r3
 800798e:	f7fe fe5a 	bl	8006646 <USBD_LL_DataInStage>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe ff6a 	bl	8006882 <USBD_LL_SOF>
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079be:	2301      	movs	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d001      	beq.n	80079ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079ca:	f7f9 f853 	bl	8000a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079d4:	7bfa      	ldrb	r2, [r7, #15]
 80079d6:	4611      	mov	r1, r2
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe ff1a 	bl	8006812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fed3 	bl	8006790 <USBD_LL_Reset>
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe ff14 	bl	8006830 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a10:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <HAL_PCD_SuspendCallback+0x30>)
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	4a03      	ldr	r2, [pc, #12]	; (8007a24 <HAL_PCD_SuspendCallback+0x30>)
 8007a16:	f043 0306 	orr.w	r3, r3, #6
 8007a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	e000ed00 	.word	0xe000ed00

08007a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe ff0e 	bl	8006858 <USBD_LL_Resume>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a4c:	4a28      	ldr	r2, [pc, #160]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a26      	ldr	r2, [pc, #152]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007a5c:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a5e:	4a25      	ldr	r2, [pc, #148]	; (8007af4 <USBD_LL_Init+0xb0>)
 8007a60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a62:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a64:	2208      	movs	r2, #8
 8007a66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a68:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a6e:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a74:	4b1e      	ldr	r3, [pc, #120]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a80:	481b      	ldr	r0, [pc, #108]	; (8007af0 <USBD_LL_Init+0xac>)
 8007a82:	f7fa f8d1 	bl	8001c28 <HAL_PCD_Init>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a8c:	f7f8 fff2 	bl	8000a74 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a96:	2318      	movs	r3, #24
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	f7fb fc05 	bl	80032aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aa6:	2358      	movs	r3, #88	; 0x58
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2180      	movs	r1, #128	; 0x80
 8007aac:	f7fb fbfd 	bl	80032aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ab6:	23c0      	movs	r3, #192	; 0xc0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2181      	movs	r1, #129	; 0x81
 8007abc:	f7fb fbf5 	bl	80032aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ac6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007aca:	2200      	movs	r2, #0
 8007acc:	2101      	movs	r1, #1
 8007ace:	f7fb fbec 	bl	80032aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007adc:	2200      	movs	r2, #0
 8007ade:	2182      	movs	r1, #130	; 0x82
 8007ae0:	f7fb fbe3 	bl	80032aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20001d4c 	.word	0x20001d4c
 8007af4:	40005c00 	.word	0x40005c00

08007af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa f995 	bl	8001e3e <HAL_PCD_Start>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f94e 	bl	8007dbc <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70bb      	strb	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b56:	78bb      	ldrb	r3, [r7, #2]
 8007b58:	883a      	ldrh	r2, [r7, #0]
 8007b5a:	78f9      	ldrb	r1, [r7, #3]
 8007b5c:	f7fa fb0f 	bl	800217e <HAL_PCD_EP_Open>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f928 	bl	8007dbc <USBD_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fa fb56 	bl	800224a <HAL_PCD_EP_Close>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f909 	bl	8007dbc <USBD_Get_USB_Status>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fa fc16 	bl	8002408 <HAL_PCD_EP_SetStall>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f8ea 	bl	8007dbc <USBD_Get_USB_Status>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fa fc57 	bl	80024c8 <HAL_PCD_EP_ClrStall>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f8cb 	bl	8007dbc <USBD_Get_USB_Status>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da0c      	bge.n	8007c6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	440b      	add	r3, r1
 8007c64:	3302      	adds	r3, #2
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	e00b      	b.n	8007c82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr

08007c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fa fa42 	bl	8002134 <HAL_PCD_SetAddress>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f880 	bl	8007dbc <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	72fb      	strb	r3, [r7, #11]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cec:	893b      	ldrh	r3, [r7, #8]
 8007cee:	7af9      	ldrb	r1, [r7, #11]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	f7fa fb46 	bl	8002382 <HAL_PCD_EP_Transmit>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f85d 	bl	8007dbc <USBD_Get_USB_Status>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	72fb      	strb	r3, [r7, #11]
 8007d20:	4613      	mov	r3, r2
 8007d22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d32:	893b      	ldrh	r3, [r7, #8]
 8007d34:	7af9      	ldrb	r1, [r7, #11]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f7fa facf 	bl	80022da <HAL_PCD_EP_Receive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f83a 	bl	8007dbc <USBD_Get_USB_Status>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fa faf1 	bl	8002354 <HAL_PCD_EP_GetRxCount>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <USBD_static_malloc+0x14>)
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr
 8007d90:	2000019c 	.word	0x2000019c

08007d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr

08007da6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr

08007dbc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d817      	bhi.n	8007e00 <USBD_Get_USB_Status+0x44>
 8007dd0:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <USBD_Get_USB_Status+0x1c>)
 8007dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd6:	bf00      	nop
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007def 	.word	0x08007def
 8007de0:	08007df5 	.word	0x08007df5
 8007de4:	08007dfb 	.word	0x08007dfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	e00b      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dee:	2302      	movs	r3, #2
 8007df0:	73fb      	strb	r3, [r7, #15]
    break;
 8007df2:	e008      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
    break;
 8007df8:	e005      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfe:	e002      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e00:	2302      	movs	r3, #2
 8007e02:	73fb      	strb	r3, [r7, #15]
    break;
 8007e04:	bf00      	nop
  }
  return usb_status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop

08007e14 <__libc_init_array>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	2500      	movs	r5, #0
 8007e18:	4e0c      	ldr	r6, [pc, #48]	; (8007e4c <__libc_init_array+0x38>)
 8007e1a:	4c0d      	ldr	r4, [pc, #52]	; (8007e50 <__libc_init_array+0x3c>)
 8007e1c:	1ba4      	subs	r4, r4, r6
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d109      	bne.n	8007e38 <__libc_init_array+0x24>
 8007e24:	f000 f822 	bl	8007e6c <_init>
 8007e28:	2500      	movs	r5, #0
 8007e2a:	4e0a      	ldr	r6, [pc, #40]	; (8007e54 <__libc_init_array+0x40>)
 8007e2c:	4c0a      	ldr	r4, [pc, #40]	; (8007e58 <__libc_init_array+0x44>)
 8007e2e:	1ba4      	subs	r4, r4, r6
 8007e30:	10a4      	asrs	r4, r4, #2
 8007e32:	42a5      	cmp	r5, r4
 8007e34:	d105      	bne.n	8007e42 <__libc_init_array+0x2e>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e3c:	4798      	blx	r3
 8007e3e:	3501      	adds	r5, #1
 8007e40:	e7ee      	b.n	8007e20 <__libc_init_array+0xc>
 8007e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e46:	4798      	blx	r3
 8007e48:	3501      	adds	r5, #1
 8007e4a:	e7f2      	b.n	8007e32 <__libc_init_array+0x1e>
 8007e4c:	08007ef8 	.word	0x08007ef8
 8007e50:	08007ef8 	.word	0x08007ef8
 8007e54:	08007ef8 	.word	0x08007ef8
 8007e58:	08007efc 	.word	0x08007efc

08007e5c <memset>:
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4402      	add	r2, r0
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d100      	bne.n	8007e66 <memset+0xa>
 8007e64:	4770      	bx	lr
 8007e66:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6a:	e7f9      	b.n	8007e60 <memset+0x4>

08007e6c <_init>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr

08007e78 <_fini>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr
